version: '3.7'

services:
  postgres:
    image: postgres:13
    container_name: ${APP_NAME}_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:${POSTGRES_PORT}:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal

  api:
    build:
      context: ./backends/api
      dockerfile: Dockerfile
    container_name: ${APP_NAME}_api
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      API_PORT: ${API_PORT}
      RUST_LOG: ${RUST_LOG_LEVEL}
      CORS_ORIGIN: ${CORS_ORIGIN}
    ports:
      - "127.0.0.1:${API_PORT}:${API_PORT}"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${API_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.pm2
    container_name: ${APP_NAME}_frontend
    depends_on:
      - api
    environment:
      NODE_ENV: ${NODE_ENV}
      SITE_PORT: ${SITE_PORT}
      ADMIN_PORT: ${ADMIN_PORT}
      API_URL: http://api:${API_PORT}
      PUBLIC_API_URL: ${PUBLIC_API_URL}
      SESSION_SECRET: ${SESSION_SECRET}
      ADMIN_SESSION_SECRET: ${ADMIN_SESSION_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
    ports:
      - "127.0.0.1:${SITE_PORT}:${SITE_PORT}"
      - "127.0.0.1:${ADMIN_PORT}:${ADMIN_PORT}"
      - "127.0.0.1:9615:9615" # PM2 웹 인터페이스
    volumes:
      - ./logs:/app/logs
      - ./frontends/site/logs:/app/frontends/site/logs
      - ./frontends/admin/logs:/app/frontends/admin/logs
    restart: unless-stopped
    networks:
      - internal

  nginx:
    image: nginx:1.20-alpine
    container_name: ${APP_NAME}_nginx
    depends_on:
      - frontend
      - api
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    restart: unless-stopped
    environment:
      - DOMAIN=${DOMAIN}
      - API_UPSTREAM=api:${API_PORT}
      - SITE_UPSTREAM=frontend:${SITE_PORT}
      - ADMIN_UPSTREAM=frontend:${ADMIN_PORT}
    networks:
      - internal
      - external

  redis:
    image: redis:6-alpine
    container_name: ${APP_NAME}_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-DvzOYmv1V/fe/dEspn/1/HNSVQ39X7D/nOnSLtalqhU=}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-DvzOYmv1V/fe/dEspn/1/HNSVQ39X7D/nOnSLtalqhU=}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:${REDIS_PORT}:6379"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  internal:
    name: ${APP_NAME}_internal
    driver: bridge
  external:
    name: ${APP_NAME}_external
    driver: bridge
