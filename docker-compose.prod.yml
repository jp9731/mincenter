version: '3.8'

services:
  postgres:
    image: postgres:13-alpine
    container_name: ${APP_NAME:-mincenter}_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mincenter}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - ./database/data:/var/lib/postgresql/data
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "15432:5432"
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  api:
    build:
      context: ./backends/api
      dockerfile: Dockerfile
      cache_from:
        - rust:1.75-alpine
      no_cache: false
      pull: true
    container_name: ${APP_NAME:-mincenter}_api
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-mincenter}
      REDIS_URL: redis://:${REDIS_PASSWORD:-default_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-default_jwt_secret}
      API_PORT: ${API_PORT:-18080}
      RUST_LOG: ${RUST_LOG_LEVEL:-info}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
    ports:
      - "${API_PORT:-18080}:${API_PORT:-18080}"
    networks:
      - internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${API_PORT:-18080}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  site:
    build:
      context: ./frontends/site
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL:-http://localhost:18080}
        - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:18080}
        - NODE_ENV=production
      cache_from:
        - node:18-alpine
      no_cache: false
      pull: true
    container_name: ${APP_NAME:-mincenter}_site
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      API_URL: http://api:${API_PORT:-18080}
      PUBLIC_API_URL: ${PUBLIC_API_URL:-http://localhost:18080}
      SESSION_SECRET: ${SESSION_SECRET:-default_secret}
    ports:
      - "13000:3000"
    networks:
      - internal
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  admin:
    build:
      context: ./frontends/admin
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL:-http://localhost:18080}
        - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:18080}
        - NODE_ENV=production
      cache_from:
        - node:18-alpine
      no_cache: false
      pull: true
    container_name: ${APP_NAME:-mincenter}_admin
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      API_URL: http://api:${API_PORT:-18080}
      PUBLIC_API_URL: ${PUBLIC_API_URL:-http://localhost:18080}
      SESSION_SECRET: ${ADMIN_SESSION_SECRET:-default_admin_secret}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@localhost}
    ports:
      - "13001:3000"
    networks:
      - internal
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: ${APP_NAME:-mincenter}_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-DvzOYmv1V/fe/dEspn/1/HNSVQ39X7D/nOnSLtalqhU=}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-DvzOYmv1V/fe/dEspn/1/HNSVQ39X7D/nOnSLtalqhU=}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-16379}:6379"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  internal:
    driver: bridge
    name: minc_int
    driver_opts:
      com.docker.network.bridge.name: minc_int
