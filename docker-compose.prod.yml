version: '3.7'

services:
  postgres:
    image: postgres:13
    container_name: ${APP_NAME}_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:${POSTGRES_PORT}:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal

  api:
    image: nginx:alpine
    container_name: ${APP_NAME}_api
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      API_PORT: ${API_PORT}
      RUST_LOG: ${RUST_LOG_LEVEL}
      CORS_ORIGIN: ${CORS_ORIGIN}
    ports:
      - "127.0.0.1:${API_PORT}:80"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal
    # 임시로 nginx를 API 서버로 사용
    command: >
      sh -c "echo 'server { listen 80; location / { return 200 \"API Server Running\"; } location /health { return 200 \"healthy\"; } }' > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

  site:
    build:
      context: ./frontends/site
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL}
        - PUBLIC_API_URL=${PUBLIC_API_URL}
    container_name: ${APP_NAME}_site
    depends_on:
      - api
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${SITE_PORT}
      API_URL: http://api:80
      PUBLIC_API_URL: ${PUBLIC_API_URL}
      SESSION_SECRET: ${SESSION_SECRET}
    ports:
      - "127.0.0.1:${SITE_PORT}:3000"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - internal

  admin:
    build:
      context: ./frontends/admin
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL}
        - PUBLIC_API_URL=${PUBLIC_API_URL}
    container_name: ${APP_NAME}_admin
    depends_on:
      - api
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${ADMIN_PORT}
      API_URL: http://api:80
      PUBLIC_API_URL: ${PUBLIC_API_URL}
      SESSION_SECRET: ${ADMIN_SESSION_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
    ports:
      - "127.0.0.1:${ADMIN_PORT}:3000"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - internal

  redis:
    image: redis:6-alpine
    container_name: ${APP_NAME}_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:${REDIS_PORT}:6379"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  internal:
    name: ${APP_NAME}_internal
    driver: bridge
