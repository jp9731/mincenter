version: '3.7'

services:
  postgres:
    image: postgres:13
    container_name: ${APP_NAME}_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:${POSTGRES_PORT}:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal

  site:
    build:
      context: ./frontends/site
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL}
        - PUBLIC_API_URL=${PUBLIC_API_URL}
    container_name: ${APP_NAME}_site
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${SITE_PORT}
      API_URL: ${PUBLIC_API_URL}
      PUBLIC_API_URL: ${PUBLIC_API_URL}
      SESSION_SECRET: ${SESSION_SECRET}
    ports:
      - "127.0.0.1:${SITE_PORT}:${SITE_PORT}"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - internal

  admin:
    build:
      context: ./frontends/admin
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL}
        - PUBLIC_API_URL=${PUBLIC_API_URL}
    container_name: ${APP_NAME}_admin
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${ADMIN_PORT}
      API_URL: ${PUBLIC_API_URL}
      PUBLIC_API_URL: ${PUBLIC_API_URL}
      SESSION_SECRET: ${ADMIN_SESSION_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
    ports:
      - "127.0.0.1:${ADMIN_PORT}:${ADMIN_PORT}"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - internal

  redis:
    image: redis:6-alpine
    container_name: ${APP_NAME}_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:${REDIS_PORT}:6379"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  internal:
    name: ${APP_NAME}_internal
    driver: bridge
