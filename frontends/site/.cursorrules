
## 프로젝트 개요
장애인 봉사단체의 활동을 알리고 소식을 공유하는 공용 웹사이트 프론트엔드
- 프레임워크: SvelteKit
- 스타일링: TailwindCSS
- 컴포넌트: shadcn-svelte
- 아이콘 : heroicons
- 언어: TypeScript
- 빌드 도구: Vite

## 사이트 구조 (민들레장애인자립생활센터 참고)

### 메인 네비게이션
```
홈 (/)
├── 센터소개 (/about)
│   ├── 인사말
│   ├── 연혁
│   ├── 조직도
│   └── 찾아오시는 길
├── 사업안내 (/services)
│   ├── 자립생활지원
│   ├── 활동지원서비스
│   ├── 이동지원서비스
│   └── 권익옹호활동
├── 커뮤니티 (/community)
│   ├── 공지사항
│   ├── 봉사활동 후기
│   ├── 자유게시판
│   └── 질문과 답변
├── 갤러리 (/gallery)
│   ├── 활동사진
│   ├── 행사사진
│   └── 영상자료
├── 참여하기 (/participate)
│   ├── 봉사신청
│   ├── 후원하기
│   └── 문의하기
└── 회원 (/auth)
    ├── 로그인 (/auth/login)
    ├── 회원가입 (/auth/register)
    ├── 비밀번호 찾기 (/auth/forgot-password)
    ├── 마이페이지 (/my)
    │   ├── 프로필 관리 (/my/profile)
    │   ├── 내 활동 (/my/activities)
    │   ├── 포인트 내역 (/my/points)
    │   ├── 내 게시글 (/my/posts)
    │   ├── 댓글 관리 (/my/comments)
    │   ├── 좋아요 목록 (/my/likes)
    │   ├── 봉사신청 내역 (/my/volunteer-history)
    │   ├── 후원 내역 (/my/donations)
    │   ├── 알림 설정 (/my/notifications)
    │   └── 회원 탈퇴 (/my/delete-account)
    └── 소셜 로그인 콜백
        ├── 구글 (/auth/callback/google)
        ├── 네이버 (/auth/callback/naver)
        ├── 카카오 (/auth/callback/kakao)
        └── 페이스북 (/auth/callback/facebook)
```

## 코딩 스타일 및 규칙

### 기본 원칙
- **접근성 우선**: WCAG 2.1 AA 수준 준수
- **반응형 디자인**: 모바일 퍼스트 접근
- **성능 최적화**: 이미지 최적화, 레이지 로딩
- **사용자 경험**: 직관적이고 명확한 내비게이션
- **감정적 연결**: 따뜻하고 신뢰감 있는 디자인

### 네이밍 규칙
- **컴포넌트**: PascalCase (예: Header.svelte, PostCard.svelte)
- **페이지**: kebab-case (예: about.svelte, volunteer-application.svelte)
- **스토어**: camelCase (예: userStore, postsStore)
- **유틸리티**: camelCase (예: formatDate, validateEmail)
- **CSS 클래스**: BEM 또는 TailwindCSS utility classes

### 프로젝트 구조
```
src/
├── app.html                 # HTML 템플릿
├── app.css                  # 글로벌 스타일
├── app.d.ts                 # 타입 정의
├── routes/
│   ├── +layout.svelte       # 루트 레이아웃
│   ├── +layout.ts           # 레이아웃 로드
│   ├── +page.svelte         # 홈페이지
│   ├── about/               # 센터소개
│   │   ├── +page.svelte
│   │   ├── history/
│   │   ├── organization/
│   │   └── location/
│   ├── services/            # 사업안내
│   │   ├── +page.svelte
│   │   ├── support/
│   │   ├── activity/
│   │   └── advocacy/
│   ├── community/           # 커뮤니티
│   │   ├── +page.svelte
│   │   ├── notices/
│   │   ├── reviews/
│   │   ├── free/
│   │   └── qna/
│   ├── gallery/             # 갤러리
│   │   ├── +page.svelte
│   │   ├── photos/
│   │   └── videos/
│   ├── participate/         # 참여하기
│   │   ├── +page.svelte
│   │   ├── volunteer/
│   │   ├── donate/
│   │   └── contact/
│   ├── auth/                # 인증 관련
│   │   ├── +layout.svelte   # 인증 레이아웃
│   │   ├── login/
│   │   │   └── +page.svelte
│   │   ├── register/
│   │   │   └── +page.svelte
│   │   ├── forgot-password/
│   │   │   └── +page.svelte
│   │   └── callback/        # 소셜 로그인 콜백
│   │       ├── google/
│   │       ├── naver/
│   │       ├── kakao/
│   │       └── facebook/
│   ├── my/                  # 마이페이지 (인증 필요)
│   │   ├── +layout.svelte   # 마이페이지 레이아웃
│   │   ├── +layout.ts       # 인증 검사
│   │   ├── +page.svelte     # 마이페이지 대시보드
│   │   ├── profile/
│   │   │   └── +page.svelte
│   │   ├── activities/
│   │   │   └── +page.svelte
│   │   ├── points/
│   │   │   └── +page.svelte
│   │   ├── posts/
│   │   │   └── +page.svelte
│   │   ├── comments/
│   │   │   └── +page.svelte
│   │   ├── likes/
│   │   │   └── +page.svelte
│   │   ├── volunteer-history/
│   │   │   └── +page.svelte
│   │   ├── donations/
│   │   │   └── +page.svelte
│   │   ├── notifications/
│   │   │   └── +page.svelte
│   │   └── delete-account/
│   │       └── +page.svelte
│   └── api/                 # API 라우트 (선택적)
│       └── auth/
├── lib/
│   ├── components/
│   │   ├── ui/              # shadcn-svelte 컴포넌트
│   │   ├── layout/          # 레이아웃 컴포넌트
│   │   ├── common/          # 공통 컴포넌트
│   │   ├── forms/           # 폼 컴포넌트
│   │   ├── auth/            # 인증 컴포넌트
│   │   └── my/              # 마이페이지 컴포넌트
│   ├── stores/              # Svelte 스토어
│   ├── utils/               # 유틸리티 함수
│   ├── types/               # TypeScript 타입
│   └── api/                 # API 클라이언트
└── static/                  # 정적 파일
    ├── images/
    ├── icons/
    └── documents/
```

## 핵심 컴포넌트 가이드

### 1. 헤더 컴포넌트
```typescript
// src/lib/components/layout/Header.svelte
<script lang="ts">
  import { page } from '$app/stores';
  import { Button } from '$lib/components/ui/button';
  import NavigationMenu from './NavigationMenu.svelte';
  
  let mobileMenuOpen = false;
</script>

<!-- 접근성과 반응형을 고려한 헤더 -->
<header class="bg-white shadow-sm border-b sticky top-0 z-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- 네비게이션 내용 -->
  </div>
</header>
```

### 2. 카드 컴포넌트
```typescript
// src/lib/components/common/Card.svelte
<script lang="ts">
  export let title: string;
  export let description: string;
  export let imageUrl: string | null = null;
  export let href: string | null = null;
  export let variant: 'default' | 'featured' = 'default';
</script>

<article class="bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow">
  <!-- 카드 내용 -->
</article>
```

### 3. 페이지 레이아웃
```typescript
// src/routes/+layout.svelte
<script lang="ts">
  import '../app.css';
  import Header from '$lib/components/layout/Header.svelte';
  import Footer from '$lib/components/layout/Footer.svelte';
  import { page } from '$app/stores';
</script>

<div class="min-h-screen flex flex-col">
  <Header />
  <main class="flex-1">
    <slot />
  </main>
  <Footer />
</div>
```

## 디자인 시스템

### 컬러 팔레트 (장애인 단체 친화적)
```css
/* tailwind.config.js에서 확장 */
colors: {
  primary: {
    50: '#f0f9ff',
    100: '#e0f2fe',
    500: '#0ea5e9', /* 신뢰감 있는 블루 */
    600: '#0284c7',
    900: '#0c4a6e'
  },
  secondary: {
    50: '#fefce8',
    100: '#fef3c7',
    500: '#eab308', /* 따뜻한 옐로우 */
    600: '#ca8a04'
  },
  success: {
    500: '#22c55e', /* 성공/희망의 그린 */
  },
  warm: {
    50: '#fef7f0',
    100: '#fdecdb',
    500: '#f97316', /* 따뜻한 오렌지 */
  }
}
```

### 타이포그래피
```css
/* 접근성을 고려한 폰트 크기 */
.text-hero { @apply text-4xl md:text-6xl font-bold leading-tight; }
.text-section { @apply text-2xl md:text-3xl font-semibold; }
.text-card-title { @apply text-lg md:text-xl font-medium; }
.text-body { @apply text-base leading-relaxed; }
.text-caption { @apply text-sm text-gray-600; }
```

### 간격 시스템
```css
/* 일관된 간격 사용 */
.section-padding { @apply py-12 md:py-16 lg:py-20; }
.container-spacing { @apply px-4 sm:px-6 lg:px-8; }
.card-spacing { @apply p-6 md:p-8; }
```

## 접근성 가이드라인

### 1. 시맨틱 HTML
```html
<!-- 올바른 시맨틱 구조 -->
<main>
  <section aria-labelledby="hero-title">
    <h1 id="hero-title">센터 소개</h1>
  </section>
  
  <nav aria-label="페이지 내비게이션">
    <ul role="list">
      <li><a href="/about">센터소개</a></li>
    </ul>
  </nav>
</main>
```

### 2. 키보드 내비게이션
```typescript
// 키보드 접근성 확보
<button 
  on:click={handleClick}
  on:keydown={(e) => e.key === 'Enter' && handleClick()}
  class="focus:ring-2 focus:ring-primary-500 focus:outline-none"
>
  버튼
</button>
```

### 3. 스크린 리더 지원
```html
<!-- 이미지 alt 텍스트 -->
<img 
  src="/volunteer-activity.jpg" 
  alt="휠체어를 탄 분과 함께 공원을 산책하는 봉사자들"
  class="w-full h-64 object-cover"
/>

<!-- 아이콘에 텍스트 대안 -->
<button aria-label="메뉴 열기">
  <MenuIcon />
  <span class="sr-only">메뉴 열기</span>
</button>
```

## 핵심 페이지 구성

### 1. 홈페이지 섹션
```typescript
// src/routes/+page.svelte
<script lang="ts">
  import HeroSection from '$lib/components/home/HeroSection.svelte';
  import ServicesOverview from '$lib/components/home/ServicesOverview.svelte';
  import RecentPosts from '$lib/components/home/RecentPosts.svelte';
  import CallToAction from '$lib/components/home/CallToAction.svelte';
</script>

<HeroSection />
<ServicesOverview />
<RecentPosts />
<CallToAction />
```

### 2. 커뮤니티 페이지
```typescript
// src/routes/community/+page.svelte
<script lang="ts">
  import { onMount } from 'svelte';
  import PostCard from '$lib/components/common/PostCard.svelte';
  import Pagination from '$lib/components/common/Pagination.svelte';
  
  let posts = [];
  let loading = false;
</script>

<div class="max-w-7xl mx-auto container-spacing section-padding">
  <h1 class="text-section mb-8">커뮤니티</h1>
  
  <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
    {#each posts as post}
      <PostCard {post} />
    {/each}
  </div>
</div>
```

### 3. 갤러리 페이지
```typescript
// src/routes/gallery/+page.svelte
<script lang="ts">
  import ImageGrid from '$lib/components/gallery/ImageGrid.svelte';
  import VideoGrid from '$lib/components/gallery/VideoGrid.svelte';
  import { Tab, Tabs } from '$lib/components/ui/tabs';
</script>

<div class="max-w-7xl mx-auto container-spacing section-padding">
  <Tabs defaultValue="photos">
    <Tab value="photos">활동사진</Tab>
    <Tab value="videos">영상자료</Tab>
    
    <div slot="photos">
      <ImageGrid />
    </div>
    
    <div slot="videos">
      <VideoGrid />
    </div>
  </Tabs>
</div>
```

## 상태 관리

### 1. 사용자 상태
```typescript
// src/lib/stores/user.ts
import { writable } from 'svelte/store';

interface User {
  id: string;
  name: string;
  email: string;
  role: 'user' | 'admin';
}

export const user = writable<User | null>(null);
export const isLoggedIn = writable(false);
```

### 2. 게시글 상태
```typescript
// src/lib/stores/posts.ts
import { writable, derived } from 'svelte/store';

export const posts = writable([]);
export const loading = writable(false);
export const currentPage = writable(1);

export const filteredPosts = derived(
  [posts, currentPage],
  ([$posts, $currentPage]) => {
    // 페이징 로직
  }
);
```

## API 통신

### 1. API 클라이언트
```typescript
// src/lib/api/client.ts
const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:8080/api';

export class ApiClient {
  private async request<T>(endpoint: string, options?: RequestInit): Promise<T> {
    const response = await fetch(`${API_BASE}${endpoint}`, {
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
      ...options,
    });
    
    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }
    
    return response.json();
  }
  
  async getPosts(page = 1, limit = 10) {
    return this.request(`/posts?page=${page}&limit=${limit}`);
  }
}
```

### 2. 로드 함수
```typescript
// src/routes/community/+page.ts
import type { PageLoad } from './$types';
import { ApiClient } from '$lib/api/client';

export const load: PageLoad = async ({ url }) => {
  const page = Number(url.searchParams.get('page')) || 1;
  const client = new ApiClient();
  
  try {
    const posts = await client.getPosts(page);
    return { posts };
  } catch (error) {
    return { posts: [], error: '게시글을 불러올 수 없습니다.' };
  }
};
```

## 폼 처리

### 1. 봉사신청 폼
```typescript
// src/lib/components/forms/VolunteerForm.svelte
<script lang="ts">
  import { Button } from '$lib/components/ui/button';
  import { Input } from '$lib/components/ui/input';
  import { Textarea } from '$lib/components/ui/textarea';
  
  let form = {
    name: '',
    email: '',
    phone: '',
    message: ''
  };
  
  let errors = {};
  let submitting = false;
  
  async function handleSubmit() {
    submitting = true;
    // 폼 제출 로직
  }
</script>

<form on:submit|preventDefault={handleSubmit} class="space-y-6">
  <div>
    <label for="name" class="block text-sm font-medium mb-2">이름</label>
    <Input
      id="name"
      bind:value={form.name}
      required
      aria-describedby={errors.name ? 'name-error' : undefined}
    />
    {#if errors.name}
      <p id="name-error" class="text-red-500 text-sm mt-1">{errors.name}</p>
    {/if}
  </div>
  
  <Button type="submit" disabled={submitting} class="w-full">
    {submitting ? '제출 중...' : '신청하기'}
  </Button>
</form>
```

## 성능 최적화

### 1. 이미지 최적화
```typescript
// src/lib/components/common/OptimizedImage.svelte
<script lang="ts">
  export let src: string;
  export let alt: string;
  export let width: number;
  export let height: number;
  export let lazy = true;
</script>

<img
  {src}
  {alt}
  {width}
  {height}
  loading={lazy ? 'lazy' : 'eager'}
  class="transition-opacity duration-300"
  on:load={() => loaded = true}
  on:error={() => error = true}
/>
```

### 2. 코드 스플리팅
```typescript
// 동적 임포트 사용
<script lang="ts">
  import { onMount } from 'svelte';
  
  let HeavyComponent;
  
  onMount(async () => {
    const module = await import('$lib/components/HeavyComponent.svelte');
    HeavyComponent = module.default;
  });
</script>

{#if HeavyComponent}
  <svelte:component this={HeavyComponent} />
{/if}
```

## SEO 최적화

### 1. 메타데이터
```typescript
// src/routes/+layout.ts
export const load = ({ url }) => {
  return {
    meta: {
      title: '민들레장애인자립생활센터',
      description: '장애인의 자립생활을 지원하는 봉사단체입니다.',
      keywords: '장애인, 자립생활, 봉사, 지원',
      ogImage: '/images/og-image.jpg'
    }
  };
};
```

### 2. 구조화된 데이터
```html
<!-- JSON-LD 스키마 -->
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "NGO",
  "name": "민들레장애인자립생활센터",
  "description": "장애인의 자립생활을 지원하는 봉사단체",
  "url": "https://example.com",
  "address": {
    "@type": "PostalAddress",
    "addressCountry": "KR"
  }
}
</script>
```

## 테스트 전략

### 1. 컴포넌트 테스트
```typescript
// src/lib/components/Card.test.ts
import { render, screen } from '@testing-library/svelte';
import Card from './Card.svelte';

test('renders card with title', () => {
  render(Card, { title: '테스트 제목' });
  expect(screen.getByText('테스트 제목')).toBeInTheDocument();
});
```

### 2. E2E 테스트
```typescript
// tests/navigation.spec.ts
import { test, expect } from '@playwright/test';

test('navigation works correctly', async ({ page }) => {
  await page.goto('/');
  await page.click('text=센터소개');
  await expect(page).toHaveURL('/about');
});
```

## 빌드 및 배포

### 1. 환경 설정
```bash
# .env.example
VITE_API_URL=http://localhost:8080/api
VITE_SITE_URL=http://localhost:5173
```

### 2. 도커 설정
```dockerfile
# Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build
EXPOSE 3000
CMD ["node", "build"]
```

이 규칙들을 따라 접근성이 뛰어나고 사용자 친화적인 장애인 봉사단체 웹사이트를 개발하세요.