# 장애인 봉사단체 관리자 대시보드 - Cursor Rules

## 프로젝트 개요
장애인 봉사단체 웹사이트의 관리자 전용 대시보드
- 프레임워크: SvelteKit (최신 버전)
- 스타일링: TailwindCSS (최신 버전)
- 컴포넌트: shadcn-svelte
- 언어: TypeScript
- 빌드 도구: Vite

## 관리자 대시보드 구조

### 메인 네비게이션
```
관리자 대시보드 (/)
├── 대시보드 (/)
│   ├── 통계 개요
│   ├── 최근 활동
│   ├── 시스템 상태
│   └── 빠른 작업
├── 회원 관리 (/users)
│   ├── 회원 목록 (/users)
│   ├── 회원 상세 (/users/[id])
│   ├── 회원 등급 관리 (/users/roles)
│   ├── 정지/차단 관리 (/users/suspended)
│   └── 포인트 관리 (/users/points)
├── 콘텐츠 관리 (/content)
│   ├── 게시판 관리 (/content/boards)
│   ├── 게시글 관리 (/content/posts)
│   ├── 댓글 관리 (/content/comments)
│   ├── 갤러리 관리 (/content/galleries)
│   ├── FAQ 관리 (/content/faqs)
│   └── 신고 관리 (/content/reports)
├── 파일 관리 (/files)
│   ├── 파일 목록 (/files)
│   ├── 파일 업로드 (/files/upload)
│   ├── 스토리지 현황 (/files/storage)
│   └── 고아 파일 정리 (/files/cleanup)
├── 사이트 관리 (/site)
│   ├── 메인 페이지 설정 (/site/homepage)
│   ├── 메뉴 관리 (/site/navigation)
│   ├── 배너 관리 (/site/banners)
│   ├── 단체 정보 관리 (/site/organization)
│   └── 사이트 설정 (/site/settings)
├── 봉사 관리 (/volunteer)
│   ├── 봉사 신청 관리 (/volunteer/applications)
│   ├── 봉사 프로그램 관리 (/volunteer/programs)
│   ├── 봉사자 관리 (/volunteer/volunteers)
│   └── 봉사 통계 (/volunteer/statistics)
├── 후원 관리 (/donations)
│   ├── 후원 내역 (/donations)
│   ├── 후원자 관리 (/donations/donors)
│   ├── 후원 통계 (/donations/statistics)
│   └── 세금계산서 관리 (/donations/receipts)
├── 알림 관리 (/notifications)
│   ├── 알림 발송 (/notifications/send)
│   ├── 발송 내역 (/notifications/history)
│   ├── 이메일 템플릿 (/notifications/templates)
│   └── 푸시 알림 (/notifications/push)
├── 통계 및 분석 (/analytics)
│   ├── 방문자 통계 (/analytics/visitors)
│   ├── 회원 분석 (/analytics/users)
│   ├── 콘텐츠 분석 (/analytics/content)
│   ├── 봉사 활동 분석 (/analytics/volunteer)
│   └── 리포트 생성 (/analytics/reports)
├── 시스템 관리 (/system)
│   ├── 로그 관리 (/system/logs)
│   ├── 백업 관리 (/system/backups)
│   ├── 캐시 관리 (/system/cache)
│   ├── 데이터베이스 관리 (/system/database)
│   └── API 모니터링 (/system/api)
└── 관리자 설정 (/admin)
    ├── 관리자 계정 관리 (/admin/accounts)
    ├── 권한 관리 (/admin/permissions)
    ├── 로그인 기록 (/admin/login-history)
    └── 보안 설정 (/admin/security)
```

## 코딩 스타일 및 규칙

### 기본 원칙
- **보안 우선**: 모든 관리자 기능에 권한 검증
- **사용성**: 직관적이고 효율적인 관리 인터페이스
- **성능**: 대용량 데이터 처리 최적화
- **접근성**: WCAG 2.1 AA 수준 준수
- **반응형**: 태블릿/데스크톱 환경 최적화

### 네이밍 규칙
- **컴포넌트**: PascalCase (예: UserTable.svelte, StatsCard.svelte)
- **페이지**: kebab-case (예: user-detail.svelte, content-management.svelte)
- **스토어**: camelCase (예: adminStore, usersStore)
- **유틸리티**: camelCase (예: formatNumber, exportData)
- **API 함수**: camelCase (예: fetchUsers, updateUserRole)

### 프로젝트 구조
```
src/
├── app.html                 # HTML 템플릿
├── app.css                  # 글로벌 스타일
├── app.d.ts                 # 타입 정의
├── routes/
│   ├── +layout.svelte       # 관리자 레이아웃
│   ├── +layout.ts           # 관리자 권한 검증
│   ├── +page.svelte         # 대시보드 홈
│   ├── users/               # 회원 관리
│   │   ├── +page.svelte
│   │   ├── [id]/
│   │   ├── roles/
│   │   ├── suspended/
│   │   └── points/
│   ├── content/             # 콘텐츠 관리
│   │   ├── +page.svelte
│   │   ├── boards/
│   │   ├── posts/
│   │   ├── comments/
│   │   ├── galleries/
│   │   ├── faqs/
│   │   └── reports/
│   ├── files/               # 파일 관리
│   │   ├── +page.svelte
│   │   ├── upload/
│   │   ├── storage/
│   │   └── cleanup/
│   ├── site/                # 사이트 관리
│   │   ├── +page.svelte
│   │   ├── homepage/
│   │   ├── navigation/
│   │   ├── banners/
│   │   ├── organization/
│   │   └── settings/
│   ├── volunteer/           # 봉사 관리
│   │   ├── +page.svelte
│   │   ├── applications/
│   │   ├── programs/
│   │   ├── volunteers/
│   │   └── statistics/
│   ├── donations/           # 후원 관리
│   │   ├── +page.svelte
│   │   ├── donors/
│   │   ├── statistics/
│   │   └── receipts/
│   ├── notifications/       # 알림 관리
│   │   ├── +page.svelte
│   │   ├── send/
│   │   ├── history/
│   │   ├── templates/
│   │   └── push/
│   ├── analytics/           # 통계 분석
│   │   ├── +page.svelte
│   │   ├── visitors/
│   │   ├── users/
│   │   ├── content/
│   │   ├── volunteer/
│   │   └── reports/
│   ├── system/              # 시스템 관리
│   │   ├── +page.svelte
│   │   ├── logs/
│   │   ├── backups/
│   │   ├── cache/
│   │   ├── database/
│   │   └── api/
│   └── admin/               # 관리자 설정
│       ├── +page.svelte
│       ├── accounts/
│       ├── permissions/
│       ├── login-history/
│       └── security/
├── lib/
│   ├── components/
│   │   ├── ui/              # shadcn-svelte 컴포넌트
│   │   ├── admin/           # 관리자 전용 컴포넌트
│   │   │   ├── layout/      # 레이아웃 컴포넌트
│   │   │   ├── tables/      # 테이블 컴포넌트
│   │   │   ├── charts/      # 차트 컴포넌트
│   │   │   ├── forms/       # 폼 컴포넌트
│   │   │   ├── modals/      # 모달 컴포넌트
│   │   │   └── widgets/     # 위젯 컴포넌트
│   │   └── common/          # 공통 컴포넌트
│   ├── stores/              # Svelte 스토어
│   │   ├── admin.ts         # 관리자 상태
│   │   ├── users.ts         # 회원 관리
│   │   ├── content.ts       # 콘텐츠 관리
│   │   └── analytics.ts     # 통계 데이터
│   ├── utils/               # 유틸리티 함수
│   │   ├── auth.ts          # 인증 관련
│   │   ├── permissions.ts   # 권한 관리
│   │   ├── formatting.ts    # 데이터 포맷팅
│   │   ├── export.ts        # 데이터 내보내기
│   │   └── validation.ts    # 입력 검증
│   ├── types/               # TypeScript 타입
│   │   ├── admin.ts
│   │   ├── user.ts
│   │   ├── content.ts
│   │   └── analytics.ts
│   └── api/                 # API 클라이언트
│       ├── admin.ts
│       ├── users.ts
│       ├── content.ts
│       └── analytics.ts
└── static/                  # 정적 파일
    ├── images/
    ├── icons/
    └── exports/
```

## 핵심 컴포넌트 가이드

### 1. 관리자 레이아웃
```typescript
// src/routes/+layout.svelte
<script lang="ts">
  import '../app.css';
  import AdminSidebar from '$lib/components/admin/layout/AdminSidebar.svelte';
  import AdminHeader from '$lib/components/admin/layout/AdminHeader.svelte';
  import { adminUser, isAdminLoggedIn } from '$lib/stores/admin';
  import { page } from '$app/stores';
  import { goto } from '$app/navigation';
  
  // 관리자 권한 확인
  $: if (!$isAdminLoggedIn && $page.url.pathname !== '/admin/login') {
    goto('/admin/login');
  }
</script>

{#if $isAdminLoggedIn}
  <div class="min-h-screen bg-gray-50 flex">
    <!-- 사이드바 -->
    <AdminSidebar />
    
    <!-- 메인 콘텐츠 -->
    <div class="flex-1 flex flex-col lg:ml-64">
      <AdminHeader />
      
      <main class="flex-1 p-6">
        <slot />
      </main>
    </div>
  </div>
{:else}
  <!-- 로그인 페이지 -->
  <slot />
{/if}
```

### 2. 관리자 사이드바
```typescript
// src/lib/components/admin/layout/AdminSidebar.svelte
<script lang="ts">
  import { page } from '$app/stores';
  import { adminUser } from '$lib/stores/admin';
  import { 
    HomeIcon, 
    UsersIcon, 
    FileTextIcon, 
    FolderIcon,
    SettingsIcon,
    BarChart3Icon,
    BellIcon,
    HeartHandshakeIcon,
    GiftIcon,
    ServerIcon 
  } from 'lucide-svelte';
  
  const navigationItems = [
    {
      title: '대시보드',
      href: '/',
      icon: HomeIcon,
      permission: 'dashboard.view'
    },
    {
      title: '회원 관리',
      href: '/users',
      icon: UsersIcon,
      permission: 'users.view',
      children: [
        { title: '회원 목록', href: '/users' },
        { title: '회원 등급', href: '/users/roles' },
        { title: '정지/차단', href: '/users/suspended' },
        { title: '포인트 관리', href: '/users/points' }
      ]
    },
    {
      title: '콘텐츠 관리',
      href: '/content',
      icon: FileTextIcon,
      permission: 'content.view',
      children: [
        { title: '게시판 관리', href: '/content/boards' },
        { title: '게시글 관리', href: '/content/posts' },
        { title: '댓글 관리', href: '/content/comments' },
        { title: '갤러리 관리', href: '/content/galleries' },
        { title: 'FAQ 관리', href: '/content/faqs' },
        { title: '신고 관리', href: '/content/reports' }
      ]
    },
    {
      title: '파일 관리',
      href: '/files',
      icon: FolderIcon,
      permission: 'files.view'
    },
    {
      title: '봉사 관리',
      href: '/volunteer',
      icon: HeartHandshakeIcon,
      permission: 'volunteer.view'
    },
    {
      title: '후원 관리',
      href: '/donations',
      icon: GiftIcon,
      permission: 'donations.view'
    },
    {
      title: '알림 관리',
      href: '/notifications',
      icon: BellIcon,
      permission: 'notifications.view'
    },
    {
      title: '통계 분석',
      href: '/analytics',
      icon: BarChart3Icon,
      permission: 'analytics.view'
    },
    {
      title: '시스템 관리',
      href: '/system',
      icon: ServerIcon,
      permission: 'system.view'
    },
    {
      title: '관리자 설정',
      href: '/admin',
      icon: SettingsIcon,
      permission: 'admin.view'
    }
  ];
  
  $: currentPath = $page.url.pathname;
  
  function hasPermission(permission: string): boolean {
    return $adminUser?.permissions?.includes(permission) || $adminUser?.role === 'super_admin';
  }
</script>

<div class="fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform -translate-x-full lg:translate-x-0 transition-transform duration-200 ease-in-out">
  <!-- 로고 -->
  <div class="flex items-center justify-center h-16 px-4 bg-primary-600">
    <img src="/admin-logo.svg" alt="관리자" class="h-8 w-auto" />
    <span class="ml-2 text-xl font-semibold text-white">관리자</span>
  </div>
  
  <!-- 네비게이션 -->
  <nav class="mt-8 px-4 space-y-2">
    {#each navigationItems as item}
      {#if hasPermission(item.permission)}
        <div>
          <a
            href={item.href}
            class="flex items-center px-3 py-2 rounded-lg text-sm font-medium transition-colors
              {currentPath === item.href || currentPath.startsWith(item.href + '/')
                ? 'bg-primary-100 text-primary-700'
                : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
              }"
          >
            <svelte:component this={item.icon} class="w-5 h-5 mr-3" />
            {item.title}
          </a>
          
          <!-- 하위 메뉴 -->
          {#if item.children && (currentPath === item.href || currentPath.startsWith(item.href + '/'))}
            <div class="ml-8 mt-2 space-y-1">
              {#each item.children as child}
                <a
                  href={child.href}
                  class="block px-3 py-1 text-sm rounded
                    {currentPath === child.href
                      ? 'text-primary-700 font-medium'
                      : 'text-gray-600 hover:text-gray-900'
                    }"
                >
                  {child.title}
                </a>
              {/each}
            </div>
          {/if}
        </div>
      {/if}
    {/each}
  </nav>
</div>
```

### 3. 데이터 테이블 컴포넌트
```typescript
// src/lib/components/admin/tables/DataTable.svelte
<script lang="ts" generics="T">
  import { Button } from '$lib/components/ui/button';
  import { Input } from '$lib/components/ui/input';
  import { Select } from '$lib/components/ui/select';
  import { Checkbox } from '$lib/components/ui/checkbox';
  import { Badge } from '$lib/components/ui/badge';
  import Pagination from './Pagination.svelte';
  
  export let data: T[] = [];
  export let columns: TableColumn<T>[] = [];
  export let loading = false;
  export let pagination = {
    page: 1,
    limit: 10,
    total: 0,
    totalPages: 0
  };
  export let searchable = true;
  export let selectable = false;
  export let exportable = false;
  export let onSearch: (query: string) => void = () => {};
  export let onSort: (column: string, direction: 'asc' | 'desc') => void = () => {};
  export let onPageChange: (page: number) => void = () => {};
  export let onExport: () => void = () => {};
  
  let searchQuery = '';
  let selectedItems: Set<string> = new Set();
  let sortColumn = '';
  let sortDirection: 'asc' | 'desc' = 'asc';
  
  interface TableColumn<T> {
    key: keyof T;
    title: string;
    sortable?: boolean;
    width?: string;
    render?: (value: any, item: T) => string;
    component?: any;
  }
  
  function handleSort(column: TableColumn<T>) {
    if (!column.sortable) return;
    
    const newDirection = sortColumn === column.key && sortDirection === 'asc' ? 'desc' : 'asc';
    sortColumn = column.key as string;
    sortDirection = newDirection;
    onSort(sortColumn, sortDirection);
  }
  
  function handleSelectAll(checked: boolean) {
    if (checked) {
      selectedItems = new Set(data.map(item => item.id));
    } else {
      selectedItems = new Set();
    }
  }
  
  function handleSelectItem(id: string, checked: boolean) {
    if (checked) {
      selectedItems.add(id);
    } else {
      selectedItems.delete(id);
    }
    selectedItems = selectedItems;
  }
  
  $: allSelected = data.length > 0 && selectedItems.size === data.length;
  $: partiallySelected = selectedItems.size > 0 && selectedItems.size < data.length;
</script>

<div class="bg-white rounded-lg shadow">
  <!-- 테이블 헤더 -->
  <div class="px-6 py-4 border-b border-gray-200">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-medium text-gray-900">
        <slot name="title">데이터 테이블</slot>
      </h3>
      
      <div class="flex items-center space-x-4">
        <!-- 검색 -->
        {#if searchable}
          <div class="relative">
            <Input
              type="search"
              placeholder="검색..."
              bind:value={searchQuery}
              on:input={() => onSearch(searchQuery)}
              class="pl-10 w-64"
            />
            <SearchIcon class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
          </div>
        {/if}
        
        <!-- 내보내기 -->
        {#if exportable}
          <Button variant="outline" on:click={onExport}>
            <DownloadIcon class="w-4 h-4 mr-2" />
            내보내기
          </Button>
        {/if}
        
        <!-- 추가 액션 -->
        <slot name="actions" />
      </div>
    </div>
    
    <!-- 선택된 항목 액션 -->
    {#if selectable && selectedItems.size > 0}
      <div class="mt-4 p-3 bg-blue-50 rounded-lg">
        <div class="flex items-center justify-between">
          <span class="text-sm text-blue-700">
            {selectedItems.size}개 항목이 선택되었습니다.
          </span>
          <div class="flex space-x-2">
            <slot name="bulk-actions" {selectedItems} />
          </div>
        </div>
      </div>
    {/if}
  </div>
  
  <!-- 테이블 -->
  <div class="overflow-x-auto">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          {#if selectable}
            <th class="px-6 py-3 text-left">
              <Checkbox
                checked={allSelected}
                indeterminate={partiallySelected}
                on:change={e => handleSelectAll(e.detail)}
              />
            </th>
          {/if}
          
          {#each columns as column}
            <th
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider
                {column.sortable ? 'cursor-pointer hover:bg-gray-100' : ''}"
              style={column.width ? `width: ${column.width}` : ''}
              on:click={() => handleSort(column)}
            >
              <div class="flex items-center space-x-1">
                <span>{column.title}</span>
                {#if column.sortable}
                  <div class="flex flex-col">
                    <ChevronUpIcon
                      class="w-3 h-3 {sortColumn === column.key && sortDirection === 'asc' ? 'text-gray-900' : 'text-gray-400'}"
                    />
                    <ChevronDownIcon
                      class="w-3 h-3 {sortColumn === column.key && sortDirection === 'desc' ? 'text-gray-900' : 'text-gray-400'}"
                    />
                  </div>
                {/if}
              </div>
            </th>
          {/each}
          
          <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
            액션
          </th>
        </tr>
      </thead>
      
      <tbody class="bg-white divide-y divide-gray-200">
        {#if loading}
          {#each Array(5) as _}
            <tr>
              <td colspan={columns.length + (selectable ? 2 : 1)} class="px-6 py-4">
                <div class="animate-pulse flex space-x-4">
                  <div class="rounded-full bg-gray-200 h-4 w-4"></div>
                  <div class="flex-1 space-y-2 py-1">
                    <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                    <div class="h-4 bg-gray-200 rounded w-1/2"></div>
                  </div>
                </div>
              </td>
            </tr>
          {/each}
        {:else if data.length === 0}
          <tr>
            <td colspan={columns.length + (selectable ? 2 : 1)} class="px-6 py-12 text-center">
              <div class="text-gray-500">
                <FolderIcon class="mx-auto h-12 w-12 text-gray-400" />
                <p class="mt-2 text-sm">데이터가 없습니다.</p>
              </div>
            </td>
          </tr>
        {:else}
          {#each data as item, index}
            <tr class="hover:bg-gray-50">
              {#if selectable}
                <td class="px-6 py-4">
                  <Checkbox
                    checked={selectedItems.has(item.id)}
                    on:change={e => handleSelectItem(item.id, e.detail)}
                  />
                </td>
              {/if}
              
              {#each columns as column}
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {#if column.component}
                    <svelte:component this={column.component} value={item[column.key]} {item} />
                  {:else if column.render}
                    {@html column.render(item[column.key], item)}
                  {:else}
                    {item[column.key]}
                  {/if}
                </td>
              {/each}
              
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <slot name="row-actions" {item} {index} />
              </td>
            </tr>
          {/each}
        {/if}
      </tbody>
    </table>
  </div>
  
  <!-- 페이지네이션 -->
  {#if pagination.totalPages > 1}
    <div class="px-6 py-4 border-t border-gray-200">
      <Pagination
        currentPage={pagination.page}
        totalPages={pagination.totalPages}
        totalItems={pagination.total}
        itemsPerPage={pagination.limit}
        on:pageChange={e => onPageChange(e.detail)}
      />
    </div>
  {/if}
</div>
```

### 4. 통계 카드 컴포넌트
```typescript
// src/lib/components/admin/widgets/StatsCard.svelte
<script lang="ts">
  import { Card } from '$lib/components/ui/card';
  import { Badge } from '$lib/components/ui/badge';
  
  export let title: string;
  export let value: number | string;
  export let change: number | null = null;
  export let changeLabel = '전월 대비';
  export let icon: any = null;
  export let color: 'blue' | 'green' | 'yellow' | 'red' | 'purple' = 'blue';
  export let loading = false;
  
  $: changeColor = change && change > 0 ? 'green' : change && change < 0 ? 'red' : 'gray';
  $: colorClasses = {
    blue: 'bg-blue-500 text-white',
    green: 'bg-green-500 text-white',
    yellow: 'bg-yellow-500 text-white',
    red: 'bg-red-500 text-white',
    purple: 'bg-purple-500 text-white'
  };
</script>

<Card class="p-6">
  <div class="flex items-center justify-between">
    <div class="flex-1">
      <p class="text-sm font-medium text-gray-600">{title}</p>
      
      {#if loading}
        <div class="mt-2 animate-pulse">
          <div class="h-8 bg-gray-200 rounded w-24"></div>
        </div>
      {:else}
        <p class="mt-2 text-3xl font-bold text-gray-900">
          {typeof value === 'number' ? value.toLocaleString() : value}
        </p>
      {/if}
      
      {#if change !== null && !loading}
        <div class="mt-2 flex items-center">
          <Badge variant={changeColor === 'green' ? 'success' : changeColor === 'red' ? 'destructive' : 'secondary'}>
            {#if change > 0}+{/if}{change}%
          </Badge>
          <span class="ml-2 text-sm text-gray-500">{changeLabel}</span>
        </div>
      {/if}
    </div>
    
     {#if icon}
      <div class={`p-3 rounded-full ${colorClasses[color]}`}>
        <svelte:component this={icon} class="w-6 h-6" />
      </div>
    {/if}
  </div>
</Card>
```

### 5. 차트 컴포넌트
```typescript
// src/lib/components/admin/charts/LineChart.svelte
<script lang="ts">
  import { onMount } from 'svelte';
  import { Card } from '$lib/components/ui/card';
  
  export let title: string;
  export let data: ChartData[];
  export let height = 300;
  export let loading = false;
  
  interface ChartData {
    label: string;
    value: number;
  }
  
  let chartContainer: HTMLDivElement;
  let chartInstance: any;
  
  onMount(async () => {
    // Chart.js 동적 임포트
    const { Chart, registerables } = await import('chart.js');
    Chart.register(...registerables);
    
    if (chartContainer) {
      chartInstance = new Chart(chartContainer, {
        type: 'line',
        data: {
          labels: data.map(item => item.label),
          datasets: [{
            label: title,
            data: data.map(item => item.value),
            borderColor: 'rgb(59, 130, 246)',
            backgroundColor: 'rgba(59, 130, 246, 0.1)',
            fill: true,
            tension: 0.4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              grid: {
                color: 'rgba(0, 0, 0, 0.1)'
              }
            },
            x: {
              grid: {
                display: false
              }
            }
          }
        }
      });
    }
    
    return () => {
      if (chartInstance) {
        chartInstance.destroy();
      }
    };
  });
  
  $: if (chartInstance && data) {
    chartInstance.data.labels = data.map(item => item.label);
    chartInstance.data.datasets[0].data = data.map(item => item.value);
    chartInstance.update();
  }
</script>

<Card class="p-6">
  <h3 class="text-lg font-medium text-gray-900 mb-4">{title}</h3>
  
  {#if loading}
    <div class="animate-pulse">
      <div class="h-64 bg-gray-200 rounded"></div>
    </div>
  {:else}
    <div style="height: {height}px">
      <canvas bind:this={chartContainer}></canvas>
    </div>
  {/if}
</Card>
```

### 6. 모달 폼 컴포넌트
```typescript
// src/lib/components/admin/modals/FormModal.svelte
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  import { Dialog } from '$lib/components/ui/dialog';
  import { Button } from '$lib/components/ui/button';
  import { Input } from '$lib/components/ui/input';
  import { Textarea } from '$lib/components/ui/textarea';
  import { Select } from '$lib/components/ui/select';
  
  export let open = false;
  export let title: string;
  export let fields: FormField[] = [];
  export let data: Record<string, any> = {};
  export let loading = false;
  export let mode: 'create' | 'edit' = 'create';
  
  interface FormField {
    key: string;
    label: string;
    type: 'text' | 'email' | 'password' | 'number' | 'textarea' | 'select' | 'checkbox';
    required?: boolean;
    options?: { value: string; label: string }[];
    placeholder?: string;
    validation?: (value: any) => string | null;
  }
  
  const dispatch = createEventDispatcher();
  
  let formData = { ...data };
  let errors: Record<string, string> = {};
  
  function validateForm(): boolean {
    errors = {};
    
    fields.forEach(field => {
      const value = formData[field.key];
      
      if (field.required && (!value || value.toString().trim() === '')) {
        errors[field.key] = `${field.label}은(는) 필수입니다.`;
      }
      
      if (field.validation && value) {
        const error = field.validation(value);
        if (error) {
          errors[field.key] = error;
        }
      }
    });
    
    return Object.keys(errors).length === 0;
  }
  
  function handleSubmit() {
    if (!validateForm()) return;
    
    dispatch('submit', formData);
  }
  
  function handleCancel() {
    open = false;
    dispatch('cancel');
  }
  
  $: if (open && data) {
    formData = { ...data };
    errors = {};
  }
</script>

<Dialog bind:open>
  <div class="fixed inset-0 z-50 flex items-center justify-center">
    <div class="fixed inset-0 bg-black bg-opacity-50" on:click={handleCancel}></div>
    
    <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4 max-h-screen overflow-y-auto">
      <!-- 헤더 -->
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-lg font-medium text-gray-900">{title}</h3>
      </div>
      
      <!-- 폼 -->
      <form on:submit|preventDefault={handleSubmit} class="px-6 py-4 space-y-4">
        {#each fields as field}
          <div>
            <label for={field.key} class="block text-sm font-medium text-gray-700 mb-1">
              {field.label}
              {#if field.required}
                <span class="text-red-500">*</span>
              {/if}
            </label>
            
            {#if field.type === 'textarea'}
              <Textarea
                id={field.key}
                bind:value={formData[field.key]}
                placeholder={field.placeholder}
                required={field.required}
                class={errors[field.key] ? 'border-red-500' : ''}
              />
            {:else if field.type === 'select'}
              <Select
                id={field.key}
                bind:value={formData[field.key]}
                required={field.required}
                class={errors[field.key] ? 'border-red-500' : ''}
              >
                <option value="">선택하세요</option>
                {#each field.options || [] as option}
                  <option value={option.value}>{option.label}</option>
                {/each}
              </Select>
            {:else if field.type === 'checkbox'}
              <div class="flex items-center">
                <input
                  id={field.key}
                  type="checkbox"
                  bind:checked={formData[field.key]}
                  class="h-4 w-4 text-primary-600 border-gray-300 rounded"
                />
                <label for={field.key} class="ml-2 text-sm text-gray-700">
                  {field.placeholder || field.label}
                </label>
              </div>
            {:else}
              <Input
                id={field.key}
                type={field.type}
                bind:value={formData[field.key]}
                placeholder={field.placeholder}
                required={field.required}
                class={errors[field.key] ? 'border-red-500' : ''}
              />
            {/if}
            
            {#if errors[field.key]}
              <p class="text-red-500 text-sm mt-1">{errors[field.key]}</p>
            {/if}
          </div>
        {/each}
      </form>
      
      <!-- 푸터 -->
      <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
        <Button variant="outline" on:click={handleCancel} disabled={loading}>
          취소
        </Button>
        <Button type="submit" on:click={handleSubmit} disabled={loading}>
          {loading ? '처리 중...' : mode === 'create' ? '생성' : '수정'}
        </Button>
      </div>
    </div>
  </div>
</Dialog>
```

## 상태 관리

### 1. 관리자 인증 상태
```typescript
// src/lib/stores/admin.ts
import { writable, derived } from 'svelte/store';
import { browser } from '$app/environment';

interface AdminUser {
  id: string;
  name: string;
  email: string;
  role: 'super_admin' | 'admin' | 'moderator';
  permissions: string[];
  lastLogin: string;
  avatar?: string;
}

export const adminUser = writable<AdminUser | null>(null);
export const adminToken = writable<string | null>(null);

export const isAdminLoggedIn = derived(
  [adminUser, adminToken],
  ([$adminUser, $adminToken]) => !!$adminUser && !!$adminToken
);

// 관리자 로그인
export async function adminLogin(email: string, password: string) {
  const response = await fetch('/api/admin/login', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ email, password })
  });
  
  if (!response.ok) {
    throw new Error('로그인에 실패했습니다.');
  }
  
  const { user, token } = await response.json();
  
  adminUser.set(user);
  adminToken.set(token);
  
  if (browser) {
    localStorage.setItem('admin_token', token);
    localStorage.setItem('admin_user', JSON.stringify(user));
  }
}

// 관리자 로그아웃
export async function adminLogout() {
  try {
    await fetch('/api/admin/logout', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${get(adminToken)}`
      }
    });
  } catch (error) {
    console.error('로그아웃 요청 실패:', error);
  }
  
  adminUser.set(null);
  adminToken.set(null);
  
  if (browser) {
    localStorage.removeItem('admin_token');
    localStorage.removeItem('admin_user');
  }
}

// 토큰 검증
export async function verifyAdminToken() {
  if (!browser) return;
  
  const token = localStorage.getItem('admin_token');
  const userData = localStorage.getItem('admin_user');
  
  if (!token || !userData) return;
  
  try {
    const response = await fetch('/api/admin/verify', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (response.ok) {
      adminUser.set(JSON.parse(userData));
      adminToken.set(token);
    } else {
      localStorage.removeItem('admin_token');
      localStorage.removeItem('admin_user');
    }
  } catch (error) {
    console.error('토큰 검증 실패:', error);
  }
}
```

### 2. 사용자 관리 상태
```typescript
// src/lib/stores/users.ts
import { writable, derived } from 'svelte/store';

interface User {
  id: string;
  name: string;
  email: string;
  phone?: string;
  role: 'user' | 'admin';
  status: 'active' | 'inactive' | 'suspended';
  points: number;
  createdAt: string;
  lastLoginAt?: string;
}

interface UsersState {
  list: User[];
  loading: boolean;
  searchQuery: string;
  filters: {
    role?: string;
    status?: string;
  };
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

const initialState: UsersState = {
  list: [],
  loading: false,
  searchQuery: '',
  filters: {},
  pagination: {
    page: 1,
    limit: 10,
    total: 0,
    totalPages: 0
  }
};

export const usersStore = writable<UsersState>(initialState);

export const filteredUsers = derived(
  usersStore,
  ($usersStore) => {
    let filtered = $usersStore.list;
    
    if ($usersStore.searchQuery) {
      const query = $usersStore.searchQuery.toLowerCase();
      filtered = filtered.filter(user =>
        user.name.toLowerCase().includes(query) ||
        user.email.toLowerCase().includes(query)
      );
    }
    
    if ($usersStore.filters.role) {
      filtered = filtered.filter(user => user.role === $usersStore.filters.role);
    }
    
    if ($usersStore.filters.status) {
      filtered = filtered.filter(user => user.status === $usersStore.filters.status);
    }
    
    return filtered;
  }
);

// 사용자 목록 조회
export async function fetchUsers(page = 1, limit = 10) {
  usersStore.update(state => ({ ...state, loading: true }));
  
  try {
    const response = await fetch(`/api/admin/users?page=${page}&limit=${limit}`);
    const data = await response.json();
    
    usersStore.update(state => ({
      ...state,
      list: data.users,
      pagination: data.pagination,
      loading: false
    }));
  } catch (error) {
    console.error('사용자 목록 조회 실패:', error);
    usersStore.update(state => ({ ...state, loading: false }));
  }
}

// 사용자 상태 변경
export async function updateUserStatus(userId: string, status: string) {
  try {
    const response = await fetch(`/api/admin/users/${userId}/status`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    
    if (response.ok) {
      usersStore.update(state => ({
        ...state,
        list: state.list.map(user =>
          user.id === userId ? { ...user, status } : user
        )
      }));
    }
  } catch (error) {
    console.error('사용자 상태 변경 실패:', error);
  }
}
```

## API 클라이언트

### 1. 관리자 API 클라이언트
```typescript
// src/lib/api/admin.ts
import { get } from 'svelte/store';
import { adminToken } from '$lib/stores/admin';

class AdminApiClient {
  private baseUrl = '/api/admin';
  
  private async request<T>(endpoint: string, options?: RequestInit): Promise<T> {
    const token = get(adminToken);
    
    const response = await fetch(`${this.baseUrl}${endpoint}`, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': token ? `Bearer ${token}` : '',
        ...options?.headers,
      },
      ...options,
    });
    
    if (!response.ok) {
      const error = await response.json().catch(() => ({ message: 'Unknown error' }));
      throw new Error(error.message || `HTTP ${response.status}`);
    }
    
    return response.json();
  }
  
  // 대시보드 통계
  async getDashboardStats() {
    return this.request('/dashboard/stats');
  }
  
  // 사용자 관리
  async getUsers(params?: { page?: number; limit?: number; search?: string }) {
    const searchParams = new URLSearchParams();
    if (params?.page) searchParams.set('page', params.page.toString());
    if (params?.limit) searchParams.set('limit', params.limit.toString());
    if (params?.search) searchParams.set('search', params.search);
    
    return this.request(`/users?${searchParams}`);
  }
  
  async getUserById(id: string) {
    return this.request(`/users/${id}`);
  }
  
  async updateUserStatus(id: string, status: string) {
    return this.request(`/users/${id}/status`, {
      method: 'PUT',
      body: JSON.stringify({ status })
    });
  }
  
  async updateUserRole(id: string, role: string) {
    return this.request(`/users/${id}/role`, {
      method: 'PUT',
      body: JSON.stringify({ role })
    });
  }
  
  // 콘텐츠 관리
  async getPosts(params?: { page?: number; limit?: number; board?: string }) {
    const searchParams = new URLSearchParams();
    if (params?.page) searchParams.set('page', params.page.toString());
    if (params?.limit) searchParams.set('limit', params.limit.toString());
    if (params?.board) searchParams.set('board', params.board);
    
    return this.request(`/posts?${searchParams}`);
  }
  
  async updatePostStatus(id: string, status: string) {
    return this.request(`/posts/${id}/status`, {
      method: 'PUT',
      body: JSON.stringify({ status })
    });
  }
  
  async deletePost(id: string) {
    return this.request(`/posts/${id}`, { method: 'DELETE' });
  }
  
  // 파일 관리
  async getFiles(params?: { page?: number; limit?: number; type?: string }) {
    const searchParams = new URLSearchParams();
    if (params?.page) searchParams.set('page', params.page.toString());
    if (params?.limit) searchParams.set('limit', params.limit.toString());
    if (params?.type) searchParams.set('type', params.type);
    
    return this.request(`/files?${searchParams}`);
  }
  
  async getStorageStats() {
    return this.request('/files/storage');
  }
  
  async cleanupOrphanedFiles() {
    return this.request('/files/cleanup', { method: 'POST' });
  }
  
  // 알림 관리
  async sendNotification(data: {
    type: string;
    title: string;
    message: string;
    recipients?: string[];
  }) {
    return this.request('/notifications/send', {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }
  
  async getNotificationHistory(params?: { page?: number; limit?: number }) {
    const searchParams = new URLSearchParams();
    if (params?.page) searchParams.set('page', params.page.toString());
    if (params?.limit) searchParams.set('limit', params.limit.toString());
    
    return this.request(`/notifications/history?${searchParams}`);
  }
  
  // 통계 분석
  async getAnalyticsData(type: string, period: string) {
    return this.request(`/analytics/${type}?period=${period}`);
  }
  
  async exportAnalyticsReport(type: string, format: 'csv' | 'xlsx') {
    const response = await fetch(`${this.baseUrl}/analytics/${type}/export?format=${format}`, {
      headers: {
        'Authorization': `Bearer ${get(adminToken)}`
      }
    });
    
    if (!response.ok) {
      throw new Error('리포트 내보내기 실패');
    }
    
    return response.blob();
  }
}

export const adminApi = new AdminApiClient();
```

## 유틸리티 함수

### 1. 권한 관리
```typescript
// src/lib/utils/permissions.ts
import { get } from 'svelte/store';
import { adminUser } from '$lib/stores/admin';

export interface Permission {
  resource: string;
  action: string;
}

export function hasPermission(permission: string | Permission): boolean {
  const user = get(adminUser);
  
  if (!user) return false;
  if (user.role === 'super_admin') return true;
  
  const permissionString = typeof permission === 'string' 
    ? permission 
    : `${permission.resource}.${permission.action}`;
    
  return user.permissions.includes(permissionString);
}

export function canAccessRoute(route: string): boolean {
  const routePermissions: Record<string, string> = {
    '/users': 'users.view',
    '/users/roles': 'users.manage_roles',
    '/content': 'content.view',
    '/content/posts': 'content.manage_posts',
    '/files': 'files.view',
    '/analytics': 'analytics.view',
    '/system': 'system.view',
    '/admin': 'admin.view'
  };
  
  const permission = routePermissions[route];
  return permission ? hasPermission(permission) : true;
}

export const PERMISSIONS = {
  USERS: {
    VIEW: 'users.view',
    CREATE: 'users.create',
    EDIT: 'users.edit',
    DELETE: 'users.delete',
    MANAGE_ROLES: 'users.manage_roles'
  },
  CONTENT: {
    VIEW: 'content.view',
    CREATE: 'content.create',
    EDIT: 'content.edit',
    DELETE: 'content.delete',
    MANAGE_REPORTS: 'content.manage_reports'
  },
  FILES: {
    VIEW: 'files.view',
    UPLOAD: 'files.upload',
    DELETE: 'files.delete',
    MANAGE: 'files.manage'
  },
  ANALYTICS: {
    VIEW: 'analytics.view',
    EXPORT: 'analytics.export'
  },
  SYSTEM: {
    VIEW: 'system.view',
    MANAGE: 'system.manage'
  }
} as const;
```

### 2. 데이터 포맷팅
```typescript
// src/lib/utils/formatting.ts
export function formatNumber(num: number): string {
  return new Intl.NumberFormat('ko-KR').format(num);
}

export function formatCurrency(amount: number): string {
  return new Intl.NumberFormat('ko-KR', {
    style: 'currency',
    currency: 'KRW'
  }).format(amount);
}

export function formatDate(date: string | Date): string {
  return new Intl.DateTimeFormat('ko-KR', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(new Date(date));
}

export function formatDateTime(date: string | Date): string {
  return new Intl.DateTimeFormat('ko-KR', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  }).format(new Date(date));
}

export function formatFileSize(bytes: number): string {
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
  if (bytes === 0) return '0 B';
  
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
}

export function formatPercentage(value: number, total: number): string {
  const percentage = total > 0 ? (value / total) * 100 : 0;
  return `${percentage.toFixed(1)}%`;
}

export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
}

export function getStatusColor(status: string): string {
  const colors: Record<string, string> = {
    active: 'green',
    inactive: 'gray',
    suspended: 'red',
    pending: 'yellow',
    approved: 'green',
    rejected: 'red'
  };
  
  return colors[status] || 'gray';
}

export function getStatusLabel(status: string): string {
  const labels: Record<string, string> = {
    active: '활성',
    inactive: '비활성',
    suspended: '정지',
    pending: '대기',
    approved: '승인',
    rejected: '거부'
  };
  
  return labels[status] || status;
}
```

### 3. 데이터 내보내기
```typescript
// src/lib/utils/export.ts
export function exportToCSV(data: any[], filename: string) {
  if (data.length === 0) return;
  
  const headers = Object.keys(data[0]);
  const csvContent = [
    headers.join(','),
    ...data.map(row => 
      headers.map(header => {
        const value = row[header];
        return typeof value === 'string' ? `"${value}"` : value;
      }).join(',')
    )
  ].join('\n');
  
  downloadFile(csvContent, `${filename}.csv`, 'text/csv');
}

export function exportToJSON(data: any[], filename: string) {
  const jsonContent = JSON.stringify(data, null, 2);
  downloadFile(jsonContent, `${filename}.json`, 'application/json');
}

function downloadFile(content: string, filename: string, mimeType: string) {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
}
```

## 페이지 구성 예시

### 1. 대시보드 홈
```typescript
// src/routes/+page.svelte
<script lang="ts">
  import { onMount } from 'svelte';
  import StatsCard from '$lib/components/admin/widgets/StatsCard.svelte';
  import LineChart from '$lib/components/admin/charts/LineChart.svelte';
  import RecentActivity from '$lib/components/admin/widgets/RecentActivity.svelte';
  import { adminApi } from '$lib/api/admin';
  import { UsersIcon, FileTextIcon, HeartHandshakeIcon, GiftIcon } from 'lucide-svelte';
  
  let stats = {
    totalUsers: 0,
    totalPosts: 0,
    totalVolunteers: 0,
    totalDonations: 0
  };
  let chartData = [];
  let loading = true;
  
  onMount(async () => {
    try {
      const data = await adminApi.getDashboardStats();
      stats = data.stats;
      chartData = data.chartData;
    } catch (error) {
      console.error('대시보드 데이터 로드 실패:', error);
    } finally {
      loading = false;
    }
  });
</script>

<div class="space-y-6">
  <!-- 페이지 헤더 -->
  <div>
    <h1 class="text-2xl font-bold text-gray-900">대시보드</h1>
    <p class="text-gray-600">봉사단체 관리 현황을 한눈에 확인하세요</p>
  </div>
  
  <!-- 통계 카드 -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
    <StatsCard
      title="전체 회원"
      value={stats.totalUsers}
      icon={UsersIcon}
      color="blue"
      {loading}
    />
    <StatsCard
      title="게시글"
      value={stats.totalPosts}
      icon={FileTextIcon}
      color="green"
      {loading}
    />
    <StatsCard
      title="봉사자"
      value={stats.totalVolunteers}
      icon={HeartHandshakeIcon}
      color="purple"
      {loading}
    />
    <StatsCard
      title="후원"
      value={stats.totalDonations}
      icon={GiftIcon}
      color="yellow"
      {loading}
    />
  </div>
  
  <!-- 차트 및 활동 내역 -->
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <LineChart
      title="월별 회원 가입"
      data={chartData}
      {loading}
    />
    <RecentActivity {loading} />
  </div>
</div>
```

### 2. 사용자 관리 페이지
```typescript
// src/routes/users/+page.svelte
<script lang="ts">
  import { onMount } from 'svelte';
  import DataTable from '$lib/components/admin/tables/DataTable.svelte';
  import FormModal from '$lib/components/admin/modals/FormModal.svelte';
  import { Button } from '$lib/components/ui/button';
  import { Badge } from '$lib/components/ui/badge';
  import { usersStore, fetchUsers, updateUserStatus } from '$lib/stores/users';
  import { formatDate, getStatusColor, getStatusLabel } from '$lib/utils/formatting';
  import { hasPermission, PERMISSIONS } from '$lib/utils/permissions';
  
  let showModal = false;
  let modalMode: 'create' | 'edit' = 'create';
  let selectedUser = {};
  
  const columns = [
    {
      key: 'name',
      title: '이름',
      sortable: true
    },
    {
      key: 'email',
      title: '이메일',
      sortable: true
    },
    {
      key: 'role',
      title: '역할',
      render: (value) => getStatusLabel(value)
    },
    {
      key: 'status',
      title: '상태',
      component: StatusBadge
    },
    {
      key: 'points',
      title: '포인트',
      render: (value) => `${value}P`
    },
    {
      key: 'createdAt',
      title: '가입일',
      render: (value) => formatDate(value)
    }
  ];
  
  const userFormFields = [
    {
      key: 'name',
      label: '이름',
      type: 'text',
      required: true
    },
    {
      key: 'email',
      label: '이메일',
      type: 'email',
      required: true,
      validation: (value) => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(value) ? null : '올바른 이메일 형식이 아닙니다.';
      }
    },
    {
      key: 'phone',
      label: '전화번호',
      type: 'text',
      placeholder: '010-1234-5678'
    },
    {
      key: 'role',
      label: '역할',
      type: 'select',
      required: true,
      options: [
        { value: 'user', label: '일반 사용자' },
        { value: 'admin', label: '관리자' }
      ]
    },
    {
      key: 'status',
      label: '상태',
      type: 'select',
      required: true,
      options: [
        { value: 'active', label: '활성' },
        { value: 'inactive', label: '비활성' },
        { value: 'suspended', label: '정지' }
      ]
    }
  ];
  
  onMount(() => {
    fetchUsers();
  });
  
  function handleSearch(query: string) {
    usersStore.update(state => ({ ...state, searchQuery: query }));
  }
  
  function handleSort(column: string, direction: 'asc' | 'desc') {
    // 정렬 로직 구현
    console.log('Sort:', column, direction);
  }
  
  function handlePageChange(page: number) {
    fetchUsers(page);
  }
  
  function handleExport() {
    // 데이터 내보내기 로직
    console.log('Export data');
  }
  
  function openCreateModal() {
    modalMode = 'create';
    selectedUser = {};
    showModal = true;
  }
  
  function openEditModal(user: any) {
    modalMode = 'edit';
    selectedUser = user;
    showModal = true;
  }
  
  async function handleStatusChange(userId: string, newStatus: string) {
    try {
      await updateUserStatus(userId, newStatus);
      // 성공 토스트 표시
    } catch (error) {
      console.error('상태 변경 실패:', error);
      // 에러 토스트 표시
    }
  }
  
  function handleFormSubmit(event: CustomEvent) {
    const formData = event.detail;
    console.log('Form submitted:', formData);
    showModal = false;
  }
</script>

<div class="space-y-6">
  <!-- 페이지 헤더 -->
  <div class="flex items-center justify-between">
    <div>
      <h1 class="text-2xl font-bold text-gray-900">회원 관리</h1>
      <p class="text-gray-600">전체 회원을 관리하고 모니터링하세요</p>
    </div>
    
    {#if hasPermission(PERMISSIONS.USERS.CREATE)}
      <Button on:click={openCreateModal}>
        <PlusIcon class="w-4 h-4 mr-2" />
        회원 추가
      </Button>
    {/if}
  </div>
  
  <!-- 데이터 테이블 -->
  <DataTable
    data={$usersStore.list}
    {columns}
    loading={$usersStore.loading}
    pagination={$usersStore.pagination}
    searchable={true}
    selectable={true}
    exportable={hasPermission(PERMISSIONS.ANALYTICS.EXPORT)}
    onSearch={handleSearch}
    onSort={handleSort}
    onPageChange={handlePageChange}
    onExport={handleExport}
  >
    <svelte:fragment slot="title">
      회원 목록 ({$usersStore.pagination.total}명)
    </svelte:fragment>
    
    <svelte:fragment slot="actions">
      <Button variant="outline">
        <FilterIcon class="w-4 h-4 mr-2" />
        필터
      </Button>
    </svelte:fragment>
    
    <svelte:fragment slot="bulk-actions" let:selectedItems>
      {#if hasPermission(PERMISSIONS.USERS.EDIT)}
        <Button variant="outline" size="sm">
          일괄 상태 변경
        </Button>
        <Button variant="outline" size="sm">
          일괄 알림 발송
        </Button>
      {/if}
    </svelte:fragment>
    
    <svelte:fragment slot="row-actions" let:item>
      <div class="flex items-center space-x-2">
        {#if hasPermission(PERMISSIONS.USERS.EDIT)}
          <Button variant="ghost" size="sm" on:click={() => openEditModal(item)}>
            <EditIcon class="w-4 h-4" />
          </Button>
        {/if}
        
        {#if hasPermission(PERMISSIONS.USERS.VIEW)}
          <Button variant="ghost" size="sm" href="/users/{item.id}">
            <EyeIcon class="w-4 h-4" />
          </Button>
        {/if}
        
        {#if hasPermission(PERMISSIONS.USERS.DELETE)}
          <Button variant="ghost" size="sm" class="text-red-600">
            <TrashIcon class="w-4 h-4" />
          </Button>
        {/if}
      </div>
    </svelte:fragment>
  </DataTable>
</div>

<!-- 사용자 추가/수정 모달 -->
<FormModal
  bind:open={showModal}
  title={modalMode === 'create' ? '회원 추가' : '회원 정보 수정'}
  fields={userFormFields}
  data={selectedUser}
  {modalMode}
  on:submit={handleFormSubmit}
  on:cancel={() => showModal = false}
/>

<!-- 상태 뱃지 컴포넌트 -->
<script lang="ts" context="module">
  import StatusBadge from '$lib/components/admin/StatusBadge.svelte';
</script>
```

## 보안 가이드라인

### 1. 라우트 보호
```typescript
// src/routes/+layout.ts
import type { LayoutLoad } from './$types';
import { redirect } from '@sveltejs/kit';
import { verifyAdminToken } from '$lib/stores/admin';

export const load: LayoutLoad = async ({ url, depends }) => {
  depends('auth:admin');
  
  // 관리자 토큰 검증
  await verifyAdminToken();
  
  // 로그인 페이지가 아닌 경우 인증 확인
  if (url.pathname !== '/admin/login') {
    const token = typeof window !== 'undefined' ? localStorage.getItem('admin_token') : null;
    
    if (!token) {
      throw redirect(302, '/admin/login');
    }
  }
  
  return {};
};
```

### 2. 권한 기반 라우트 가드
```typescript
// src/lib/utils/route-guard.ts
import { get } from 'svelte/store';
import { adminUser } from '$lib/stores/admin';
import { canAccessRoute } from '$lib/utils/permissions';

export function createRouteGuard() {
  return {
    canActivate: (route: string): boolean => {
      const user = get(adminUser);
      
      if (!user) return false;
      
      return canAccessRoute(route);
    },
    
    requiresPermission: (permission: string) => {
      return (route: string): boolean => {
        const user = get(adminUser);
        
        if (!user) return false;
        if (user.role === 'super_admin') return true;
        
        return user.permissions.includes(permission);
      };
    }
  };
}
```

### 3. API 요청 인터셉터
```typescript
// src/lib/api/interceptors.ts
import { get } from 'svelte/store';
import { adminToken, adminLogout } from '$lib/stores/admin';
import { goto } from '$app/navigation';

export function createApiInterceptor() {
  return {
    request: (config: RequestInit): RequestInit => {
      const token = get(adminToken);
      
      return {
        ...config,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': token ? `Bearer ${token}` : '',
          ...config.headers,
        },
      };
    },
    
    response: async (response: Response): Promise<Response> => {
      if (response.status === 401) {
        // 토큰 만료 또는 인증 실패
        await adminLogout();
        goto('/admin/login');
      }
      
      return response;
    }
  };
}
```

## 테마 및 스타일링

### 1. 관리자 전용 컬러 팔레트
```css
/* tailwind.config.js에서 확장 */
colors: {
  admin: {
    primary: {
      50: '#eff6ff',
      100: '#dbeafe',
      500: '#3b82f6',
      600: '#2563eb',
      900: '#1e3a8a'
    },
    success: {
      50: '#f0fdf4',
      500: '#22c55e',
      600: '#16a34a'
    },
    warning: {
      50: '#fffbeb',
      500: '#f59e0b',
      600: '#d97706'
    },
    danger: {
      50: '#fef2f2',
      500: '#ef4444',
      600: '#dc2626'
    },
    dark: {
      50: '#f8fafc',
      100: '#f1f5f9',
      800: '#1e293b',
      900: '#0f172a'
    }
  }
}
```

### 2. 관리자 전용 유틸리티 클래스
```css
/* app.css */
@layer utilities {
  .admin-card {
    @apply bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow;
  }
  
  .admin-button-primary {
    @apply bg-admin-primary-600 text-white hover:bg-admin-primary-700 focus:ring-admin-primary-500;
  }
  
  .admin-button-danger {
    @apply bg-admin-danger-600 text-white hover:bg-admin-danger-700 focus:ring-admin-danger-500;
  }
  
  .admin-table-header {
    @apply bg-gray-50 text-xs font-medium text-gray-500 uppercase tracking-wider;
  }
  
  .admin-sidebar-item {
    @apply flex items-center px-3 py-2 rounded-lg text-sm font-medium transition-colors;
  }
  
  .admin-sidebar-item-active {
    @apply bg-admin-primary-100 text-admin-primary-700;
  }
  
  .admin-sidebar-item-inactive {
    @apply text-gray-700 hover:bg-gray-100 hover:text-gray-900;
  }
  
  .admin-status-active {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800;
  }
  
  .admin-status-inactive {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800;
  }
  
  .admin-status-suspended {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800;
  }
}
```

## 환경 설정

### 1. 환경 변수
```bash
# .env
VITE_ADMIN_API_URL=http://localhost:8080/api/admin
VITE_ADMIN_SITE_URL=http://localhost:3001
VITE_ADMIN_SESSION_TIMEOUT=3600000
VITE_ADMIN_REFRESH_INTERVAL=300000
```

### 2. Vite 설정
```typescript
// vite.config.ts
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
  plugins: [sveltekit()],
  server: {
    port: 3001,
    host: true
  },
  preview: {
    port: 3001
  },
  build: {
    sourcemap: false,
    minify: 'terser',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['svelte', '@sveltejs/kit'],
          charts: ['chart.js'],
          utils: ['date-fns', 'lodash-es']
        }
      }
    }
  }
});
```

### 3. TypeScript 설정
```json
// tsconfig.json
{
  "extends": "./.svelte-kit/tsconfig.json",
  "compilerOptions": {
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true,
    "paths": {
      "$lib/*": ["./src/lib/*"],
      "$admin/*": ["./src/lib/components/admin/*"]
    }
  }
}
```

## 배포 설정

### 1. Docker 설정
```dockerfile
# Dockerfile
FROM node:18-alpine as builder

WORKDIR /app
COPY package*.json ./
RUN npm ci

COPY . .
RUN npm run build

FROM node:18-alpine
WORKDIR /app

COPY --from=builder /app/build ./build
COPY --from=builder /app/package.json ./

RUN npm ci --only=production

EXPOSE 3001
CMD ["node", "build"]
```

### 2. 빌드 스크립트
```json
// package.json
{
  "scripts": {
    "dev": "vite dev --port 3001",
    "build": "vite build",
    "preview": "vite preview --port 3001",
    "check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
    "check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
    "lint": "prettier --plugin-search-dir . --check . && eslint .",
    "format": "prettier --plugin-search-dir . --write .",
    "build:analyze": "vite build --mode analyze"
  }
}
```

이 가이드라인을 따라 강력하고 사용자 친화적인 관리자 대시보드를 개발하세요. 보안, 성능, 접근성을 모두 고려한 관리 시스템을 구축할 수 있을 것입니다.
  