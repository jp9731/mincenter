name: Deploy API to Server

on:
  push:
    branches: [ main ]
    paths:
      - 'backends/api/**'
      - '.github/workflows/deploy-api.yml'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Server (No Build Test)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to server
      env:
        SERVER_HOST: ${{ secrets.DEPLOY_HOST }}
        SERVER_USER: ${{ secrets.DEPLOY_USER }}
        DATABASE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
      run: |
        ssh $SERVER_USER@$SERVER_HOST << 'EOF'
          set -e
          
          echo "🚀 Starting API deployment..."
          echo "📝 Note: No test build in GitHub Actions to avoid SQL connection errors"
          echo "🏗️  Building will be done on the server with proper database access"
          
          # 프로젝트 디렉토리 확인 및 생성
          echo "📁 Checking project directory..."
          mkdir -p /home/admin/projects
          
          # Git 저장소 확인 및 클론/업데이트
          if [ ! -d "/home/admin/projects/mincenter" ]; then
            echo "📥 Cloning repository for the first time..."
            cd /home/admin/projects
            
            # 기존 디렉토리가 있다면 권한 문제 해결 후 삭제
            if [ -d "mincenter" ]; then
              sudo rm -rf mincenter || rm -rf mincenter
            fi
            
            git clone https://github.com/jp9731/mincenter.git
            cd mincenter
            sudo chown -R admin:admin . || true
          else
            echo "📁 Project directory exists, updating..."
            cd /home/admin/projects/mincenter
            
            # Git 저장소인지 확인
            if [ ! -d ".git" ]; then
              echo "⚠️  Not a git repository, re-cloning..."
              cd /home/admin/projects
              sudo rm -rf mincenter || rm -rf mincenter
              git clone https://github.com/jp9731/mincenter.git
              cd mincenter
            else
              echo "📥 Pulling latest code from GitHub..."
              git fetch origin
              git reset --hard origin/main
              
              # Docker 컨테이너가 생성한 파일들 정리 (권한 문제 해결)
              echo "🧹 Cleaning Docker-generated files..."
              sudo git clean -fd || git clean -fd
              sudo chown -R admin:admin . || true
            fi
          fi
          
          # 기존 API 컨테이너 중지 및 제거
          echo "🛑 Stopping existing API container..."
          docker compose stop api 2>/dev/null || true
          docker compose rm -f api 2>/dev/null || true
          
          # Docker 이미지 정리 (권한 문제가 있는 빌드 파일들 제거)
          echo "🧹 Cleaning Docker images and build cache..."
          docker image prune -f 2>/dev/null || true
          docker builder prune -f 2>/dev/null || true
          
          # API 디렉토리로 이동
          cd backends/api
          
          # Dockerfile 생성
          echo "🐳 Creating Dockerfile..."
          cat > Dockerfile << 'DOCKERFILE_EOF'
        FROM rust:1.75 as builder
        
        WORKDIR /app
        COPY . .
        
        # SQLx CLI 설치
        RUN cargo install sqlx-cli --no-default-features --features postgres
        
        # 의존성 캐싱을 위한 더미 빌드
        RUN mkdir -p src && echo "fn main() {}" > src/main.rs
        COPY Cargo.toml Cargo.lock ./
        RUN cargo build --release && rm -rf src
        
        # 실제 소스 코드 복사 및 빌드
        COPY src ./src
        COPY .sqlx ./.sqlx
        
        # 환경변수 설정 후 빌드
        ENV SQLX_OFFLINE=true
        RUN cargo build --release --bin mincenter-api
        
        # 런타임 이미지
        FROM debian:bookworm-slim
        
        # 런타임 의존성 설치
        RUN apt-get update && apt-get install -y \
            ca-certificates \
            libssl3 \
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /app
        
        # 빌드된 바이너리 복사
        COPY --from=builder /app/target/release/mincenter-api /app/mincenter-api
        
        # 실행 권한 부여
        RUN chmod +x /app/mincenter-api
        
        # 포트 노출
        EXPOSE 18080
        
        # 환경변수 설정
        ENV API_PORT=18080
        ENV RUST_LOG=info
        
        # 헬스체크
        HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
          CMD curl -f http://localhost:18080/api/health || exit 1
        
        # 실행 명령
        CMD ["/app/mincenter-api"]
        DOCKERFILE_EOF
          
          # docker-compose.yml 업데이트
          echo "📝 Updating docker-compose.yml..."
          cd /home/admin/projects/mincenter
          
          # API 서비스가 있는지 확인하고 없으면 추가
          if ! grep -q "api:" docker-compose.yml; then
            echo "" >> docker-compose.yml
            echo "  api:" >> docker-compose.yml
            echo "    build:" >> docker-compose.yml
            echo "      context: ./backends/api" >> docker-compose.yml
            echo "      dockerfile: Dockerfile" >> docker-compose.yml
            echo "    container_name: mincenter-api" >> docker-compose.yml
            echo "    ports:" >> docker-compose.yml
            echo '      - "18080:18080"' >> docker-compose.yml
            echo "    environment:" >> docker-compose.yml
            echo "      - DATABASE_URL=postgresql://mincenter:\${DATABASE_PASSWORD}@postgres:5432/mincenter" >> docker-compose.yml
            echo "      - REDIS_URL=redis://:\${REDIS_PASSWORD}@redis:6379" >> docker-compose.yml
            echo "      - API_PORT=18080" >> docker-compose.yml
            echo "      - RUST_LOG=info" >> docker-compose.yml
            echo "      - CORS_ORIGIN=https://mincenter.kr,https://admin.mincenter.kr" >> docker-compose.yml
            echo "      - JWT_SECRET=\${JWT_SECRET}" >> docker-compose.yml
            echo "      - REFRESH_SECRET=\${REFRESH_SECRET}" >> docker-compose.yml
            echo "    depends_on:" >> docker-compose.yml
            echo "      - postgres" >> docker-compose.yml
            echo "      - redis" >> docker-compose.yml
            echo "    networks:" >> docker-compose.yml
            echo "      - mincenter_network" >> docker-compose.yml
            echo "    restart: unless-stopped" >> docker-compose.yml
            echo "    healthcheck:" >> docker-compose.yml
            echo '      test: ["CMD", "curl", "-f", "http://localhost:18080/api/health"]' >> docker-compose.yml
            echo "      interval: 30s" >> docker-compose.yml
            echo "      timeout: 10s" >> docker-compose.yml
            echo "      retries: 3" >> docker-compose.yml
            echo "      start_period: 40s" >> docker-compose.yml
          fi
          
          # 환경변수 파일 업데이트
          echo "🔧 Updating environment variables..."
          sed -i "s/POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=${DATABASE_PASSWORD}/" .env
          sed -i "s/REDIS_PASSWORD=.*/REDIS_PASSWORD=${REDIS_PASSWORD}/" .env
          
          # JWT 시크릿이 없으면 추가
          if ! grep -q "JWT_SECRET" .env; then
            echo "JWT_SECRET=${JWT_SECRET}" >> .env
            echo "REFRESH_SECRET=${REFRESH_SECRET}" >> .env
          fi
          
          # Docker 이미지 빌드 및 컨테이너 시작
          echo "🏗️  Building and starting API container..."
          docker compose build api
          docker compose up -d api
          
          # 컨테이너 시작 대기
          echo "⏳ Waiting for API container to start..."
          sleep 30
          
          # 헬스체크
          echo "🏥 Performing health check..."
          for i in {1..10}; do
            if docker exec mincenter-api curl -f http://localhost:18080/api/health; then
              echo "✅ API server is healthy!"
              break
            else
              echo "⏳ Waiting for API server... ($i/10)"
              sleep 10
            fi
          done
          
          # 컨테이너 상태 확인
          echo "📊 Container status:"
          docker compose ps api
          
          echo "🎉 API deployment completed successfully!"
        EOF
