name: Deploy Rust API

on:
  workflow_dispatch:

env:
  DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
  DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
  DEPLOY_PORT: 22000

jobs:
  deploy-api:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_HOST }} >> ~/.ssh/known_hosts || true

    - name: Deploy Rust API Source
      run: |
        echo "=== Deploying Rust API Source ==="
        
        # 서버에 디렉토리 생성 및 권한 설정
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
          mkdir -p ${{ env.DEPLOY_PATH }}/backends/api ${{ env.DEPLOY_PATH }}/mincenter-api-bin
          chmod 755 ${{ env.DEPLOY_PATH }}/backends/api ${{ env.DEPLOY_PATH }}/mincenter-api-bin || true
        "
        
        # Rust API 소스 코드 업로드
        rsync -avz -e "ssh -p ${{ env.DEPLOY_PORT }}" --delete backends/api/ ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/backends/api/
        
        echo "Rust API source deployed successfully!"

    - name: Build and Deploy Rust API
      run: |
        echo "=== Building and Deploying Rust API on Server ==="
        
        # 서버에서 Rust API 빌드
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
          cd ${{ env.DEPLOY_PATH }}/backends/api
          
          # Rust 설치 확인
          if ! command -v cargo &> /dev/null; then
            echo 'Installing Rust...'
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source ~/.cargo/env
          fi
          
          # 빌드 수행
          echo 'Building Rust API...'
          cargo build --release
          
          # 바이너리 복사를 위한 디렉토리 생성
          mkdir -p ${{ env.DEPLOY_PATH }}/mincenter-api-bin
          cp target/release/mincenter-api ${{ env.DEPLOY_PATH }}/mincenter-api-bin/
          chmod +x ${{ env.DEPLOY_PATH }}/mincenter-api-bin/mincenter-api
        "
        
        # systemd 서비스 파일 생성 (임시 파일로 생성 후 sudo로 이동)
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
          # 임시 서비스 파일 생성
          cat > /tmp/mincenter-api.service << 'EOF'
        [Unit]
        Description=MinCenter API Server
        After=network.target
        Wants=network.target
        
        [Service]
        Type=simple
        User=${{ env.DEPLOY_USER }}
        WorkingDirectory=${{ env.DEPLOY_PATH }}/backends/api
        ExecStart=${{ env.DEPLOY_PATH }}/mincenter-api-bin/mincenter-api
        Restart=always
        RestartSec=3
        Environment=DATABASE_URL=postgresql://mincenter:!@swjp0209^^@localhost:15432/mincenter
        Environment=REDIS_URL=redis://:default_password@localhost:6379
        Environment=JWT_SECRET=${{ secrets.JWT_SECRET }}
        Environment=API_PORT=18080
        Environment=RUST_LOG=info
        Environment=CORS_ORIGIN=*
        StandardOutput=journal
        StandardError=journal
        
        [Install]
        WantedBy=multi-user.target
        EOF
          
          # 서비스 파일을 systemd 디렉토리로 이동 (sudo 필요)
          echo 'Moving service file to systemd directory...'
          sudo mv /tmp/mincenter-api.service /etc/systemd/system/
        "
        
        # systemd 재로드 및 서비스 시작
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "sudo systemctl daemon-reload && sudo systemctl enable mincenter-api && sudo systemctl restart mincenter-api"
        
        echo "Rust API deployed successfully!"
        
    - name: Verify API Deployment
      run: |
        echo "=== Verifying API Deployment ==="
        
        # 잠시 대기 (API 서버가 완전히 뜰 시간 확보)
        sleep 20
        
        # 의존성 서비스 확인
        echo "Checking dependency services..."
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "docker ps --format 'table {{.Names}}\t{{.Status}}'" || true
        
        # Rust API 서버 상태 확인  
        echo "Checking Rust API status..."
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "systemctl status mincenter-api --no-pager" || true
        
        # 추가 대기
        sleep 10
        
        API_STATUS=$(ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "curl -s -o /dev/null -w '%{http_code}' http://localhost:18080/api/health || echo '000'")
        echo "Rust API Status: $API_STATUS"
        
        if [ "$API_STATUS" = "200" ]; then
          echo "✅ Rust API deployment successful!"
        else
          echo "❌ Rust API deployment may have issues"
          echo "API Status Code: $API_STATUS"
          echo "Service logs:"
          ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "sudo journalctl -u mincenter-api --lines=20 --no-pager" || true
          echo "Port usage:"
          ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "netstat -tlnp | grep :18080" || true
          exit 1
        fi