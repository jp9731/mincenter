name: Smart Deploy

on:
  # push:
  #   branches: [ main ]  # 비활성화: build-and-deploy.yml 사용
  workflow_dispatch:
    inputs:
      reason:
        description: 'Deployment reason'
        required: false
        default: 'Manual deployment'

jobs:
  smart-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup SSH for Deployment
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
      - name: Check Required Secrets
        run: |
          echo "🔍 Checking required secrets..."
          
          # 필수 Secrets 확인
          if [ -z "${{ secrets.DEPLOY_HOST }}" ]; then
            echo "❌ DEPLOY_HOST secret is missing"
            exit 1
          fi
          
          if [ -z "${{ secrets.DEPLOY_USER }}" ]; then
            echo "❌ DEPLOY_USER secret is missing"
            exit 1
          fi
          
          if [ -z "${{ secrets.DEPLOY_PATH }}" ]; then
            echo "❌ DEPLOY_PATH secret is missing"
            exit 1
          fi
          
          echo "✅ All required secrets are present"
      
      - name: Smart Deploy on Server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || 22000 }}
        run: |
          echo "🚀 Starting Smart Deploy..."
          echo "Trigger: ${{ github.event_name }}"
          echo "Reason: ${{ github.event.inputs.reason || 'Auto-deployment due to code changes' }}"
          
          # SSH known_hosts 추가
          mkdir -p ~/.ssh
          ssh-keyscan -H -p $DEPLOY_PORT $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          echo "🔗 Testing SSH connection..."
          # SSH 연결 테스트
          ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "echo 'SSH connection successful'" || {
            echo "❌ SSH connection failed"
            exit 1
          }
          
          echo "📁 Checking server directory..."
          # 서버 디렉토리 확인
          ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
            echo 'Current directory: \$(pwd)'
            echo 'Target directory: $DEPLOY_PATH'
            ls -la $DEPLOY_PATH || echo 'Directory does not exist'
          "
          
          # Docker 정리 단계
          echo "🔍 Running Docker cleanup..."
          ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
            cd $DEPLOY_PATH
            
            # Docker 정리 스크립트 실행
            if [ -f scripts/quick-docker-cleanup.sh ]; then
              chmod +x scripts/quick-docker-cleanup.sh
              ./scripts/quick-docker-cleanup.sh
            else
              docker system prune -a -f --volumes || true
              docker builder prune -a -f || true
            fi
          " || {
            echo "⚠️ Docker cleanup failed, but continuing..."
          }
          
          # 배포 단계
          echo "🚀 Starting deployment..."
          ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
            cd $DEPLOY_PATH
            
            echo 'Current working directory: \$(pwd)'
            
            # .env 파일이 있는지 확인
            if [ ! -f .env ]; then
              echo '❌ .env file not found on server'
              exit 1
            fi
            
            echo '✅ Using existing .env file on server'
            
            # 스크립트 파일 확인
            if [ ! -f scripts/smart-deploy-server.sh ]; then
              echo '❌ smart-deploy-server.sh not found'
              exit 1
            fi
            
            echo '✅ Found smart-deploy-server.sh'
            
            # 스마트 배포 스크립트 실행
            chmod +x scripts/smart-deploy-server.sh
            ./scripts/smart-deploy-server.sh
          " || {
            echo "❌ Smart Deploy failed"
            exit 1
          }
          
          echo "✅ Smart Deploy completed!"