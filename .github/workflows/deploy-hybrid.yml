name: Deploy Frontend Services

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
  DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
  DEPLOY_PORT: 22000  # 기본 SSH 포트 또는 필요시 secrets로 설정

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          frontends/site/node_modules
          frontends/admin/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontends/site/package-lock.json', 'frontends/admin/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Clean Node.js cache (if needed)
      run: |
        # npm 캐시 검증 및 정리
        npm cache verify || npm cache clean --force
        
    - name: Install dependencies (Site)
      working-directory: ./frontends/site
      run: npm ci
      
    - name: Install dependencies (Admin)
      working-directory: ./frontends/admin
      run: npm ci
      
    - name: Build Site Frontend
      working-directory: ./frontends/site
      run: npm run build
      
    - name: Build Admin Frontend
      working-directory: ./frontends/admin
      run: npm run build
      
    # Rust API는 서버에서 직접 빌드하도록 변경
      
    - name: Debug Secrets
      run: |
        echo "Checking if secrets are set..."
        echo "REMOTE_HOST: ${{ secrets.REMOTE_HOST != '' && 'SET' || 'NOT SET' }}"
        echo "REMOTE_USER: ${{ secrets.REMOTE_USER != '' && 'SET' || 'NOT SET' }}"
        echo "REMOTE_PORT: ${{ secrets.REMOTE_PORT != '' && 'SET' || 'NOT SET' }}"
        echo "SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY != '' && 'SET' || 'NOT SET' }}"
        echo "JWT_SECRET: ${{ secrets.JWT_SECRET != '' && 'SET' || 'NOT SET' }}"
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_HOST }} >> ~/.ssh/known_hosts || true

    - name: Deploy Frontend Services  
      run: |
        echo "=== Deploying Frontend Services ==="
        
        # 서버에 디렉토리 생성 및 권한 설정
        ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "
          sudo mkdir -p /opt/mincenter/database /opt/mincenter/frontends/site /opt/mincenter/frontends/admin
          sudo chown -R ${{ env.REMOTE_USER }}:${{ env.REMOTE_USER }} /opt/mincenter
          sudo chmod -R 755 /opt/mincenter
        "
        
        # 배포용 docker-compose 파일 업로드 (프론트엔드용으로 수정)
        scp -P ${{ env.REMOTE_PORT }} docker-compose.deploy.yml ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/opt/mincenter/
        scp -P ${{ env.REMOTE_PORT }} database/init.sql ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/opt/mincenter/database/
        scp -P ${{ env.REMOTE_PORT }} database/seed.sql ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/opt/mincenter/database/
        
        # 프론트엔드 소스 코드 업로드
        rsync -avz -e "ssh -p ${{ env.REMOTE_PORT }}" --delete frontends/site/ ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/opt/mincenter/frontends/site/
        rsync -avz -e "ssh -p ${{ env.REMOTE_PORT }}" --delete frontends/admin/ ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/opt/mincenter/frontends/admin/
        
        # Docker Compose 프론트엔드 서비스만 시작
        ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "cd /opt/mincenter && docker-compose -f docker-compose.deploy.yml up -d --build postgres redis site admin"
        
        echo "Frontend services deployed successfully!"
        
    - name: Verify Frontend Deployment
      run: |
        echo "=== Verifying Frontend Deployment ==="
        
        # 잠시 대기
        sleep 30
        
        # Docker 서비스 상태 확인
        ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "cd /opt/mincenter && docker-compose -f docker-compose.deploy.yml ps"
        
        # 데이터베이스 연결 확인
        DB_STATUS=$(ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "docker exec mincenter-postgres pg_isready -U postgres" | grep -o "accepting connections" || echo "failed")
        echo "Database Status: $DB_STATUS"
        
        # Redis 연결 확인
        REDIS_STATUS=$(ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "docker exec mincenter-redis redis-cli -a default_password ping" | grep -o "PONG" || echo "failed")
        echo "Redis Status: $REDIS_STATUS"
        
        # 프론트엔드 서비스 상태 확인
        SITE_STATUS=$(ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "curl -s -o /dev/null -w '%{http_code}' http://localhost:3000 || echo '000'")
        ADMIN_STATUS=$(ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "curl -s -o /dev/null -w '%{http_code}' http://localhost:3001 || echo '000'")
        
        echo "Site Frontend Status: $SITE_STATUS"
        echo "Admin Frontend Status: $ADMIN_STATUS"
        
        # 결과 요약
        echo "=== Frontend Deployment Summary ==="
        echo "PostgreSQL: $DB_STATUS"
        echo "Redis: $REDIS_STATUS"
        echo "Site Frontend: $SITE_STATUS"
        echo "Admin Frontend: $ADMIN_STATUS"
        
        if [ "$DB_STATUS" = "accepting connections" ] && [ "$REDIS_STATUS" = "PONG" ] && [ "$SITE_STATUS" = "200" ] && [ "$ADMIN_STATUS" = "200" ]; then
          echo "✅ Frontend services deployment successful!"
          echo "💡 You can now manually deploy the Rust API if needed"
        else
          echo "❌ Some frontend services may have issues"
          exit 1
        fi 