name: Deploy Frontend Services (Legacy)

on:
  # push:
  #   branches: [ main, develop ]
  workflow_dispatch:

env:
  DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
  DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
  DEPLOY_PORT: 22000  # 기본 SSH 포트 또는 필요시 secrets로 설정

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          frontends/site/node_modules
          frontends/admin/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontends/site/package-lock.json', 'frontends/admin/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Clean Node.js cache (if needed)
      run: |
        # npm 캐시 검증 및 정리
        npm cache verify || npm cache clean --force
        
    - name: Install dependencies (Site)
      working-directory: ./frontends/site
      run: npm ci
      
    - name: Install dependencies (Admin)
      working-directory: ./frontends/admin
      run: npm ci
      
    - name: Build Site Frontend
      working-directory: ./frontends/site
      run: npm run build
      
    - name: Build Admin Frontend
      working-directory: ./frontends/admin
      run: npm run build
      
    # Rust API는 서버에서 직접 빌드하도록 변경
      
    - name: Debug Secrets
      run: |
        echo "Checking if secrets are set..."
        echo "DEPLOY_HOST: ${{ secrets.DEPLOY_HOST != '' && 'SET' || 'NOT SET' }}"
        echo "DEPLOY_USER: ${{ secrets.DEPLOY_USER != '' && 'SET' || 'NOT SET' }}"
        echo "DEPLOY_PATH: ${{ secrets.DEPLOY_PATH != '' && 'SET' || 'NOT SET' }}"
        echo "DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY != '' && 'SET' || 'NOT SET' }}"
        echo "JWT_SECRET: ${{ secrets.JWT_SECRET != '' && 'SET' || 'NOT SET' }}"
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_HOST }} >> ~/.ssh/known_hosts || true

    - name: Deploy Frontend Services  
      run: |
        echo "=== Deploying Frontend Services ==="
        
        # 서버에 디렉토리 생성 및 권한 설정
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
          mkdir -p ${{ env.DEPLOY_PATH }}/database ${{ env.DEPLOY_PATH }}/frontends/site ${{ env.DEPLOY_PATH }}/frontends/admin
          chmod 755 ${{ env.DEPLOY_PATH }}/database ${{ env.DEPLOY_PATH }}/frontends/site ${{ env.DEPLOY_PATH }}/frontends/admin || true
        "
        
        # 배포용 docker-compose 파일 업로드 (프론트엔드용으로 수정)
        scp -P ${{ env.DEPLOY_PORT }} docker-compose.deploy.yml ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/
        scp -P ${{ env.DEPLOY_PORT }} database/init.sql ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/database/
        scp -P ${{ env.DEPLOY_PORT }} database/seed.sql ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/database/
        
        # 프론트엔드 소스 코드 업로드
        rsync -avz --exclude='.env*' -e "ssh -p ${{ env.DEPLOY_PORT }}" --delete frontends/site/ ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/frontends/site/
        rsync -avz --exclude='.env*' -e "ssh -p ${{ env.DEPLOY_PORT }}" --delete frontends/admin/ ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/frontends/admin/
        
        # Rust API 소스 코드 업로드
        rsync -avz --exclude-from='backends/api/.rsync-exclude' -e "ssh -p ${{ env.DEPLOY_PORT }}" --delete backends/api/ ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/backends/api/
        
        # Docker Compose 서비스 시작 (Rust API 제외)
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "cd ${{ env.DEPLOY_PATH }} && docker-compose -f docker-compose.deploy.yml up -d --build postgres redis site admin"
        
        # Rust API 빌드 및 시작 (Docker 없이 직접 실행)
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
          cd ${{ env.DEPLOY_PATH }}/backends/api
          # 기존 프로세스 종료
          pkill -f mincenter-api || true
          sleep 2
          # Rust 빌드 (--bin 옵션 추가)
          cargo build --release --bin mincenter-api
          # 환경변수 설정
          export DATABASE_URL=postgresql://mincenter:!@swjp0209^^@localhost:15432/mincenter
          export REDIS_URL=redis://:tnekwoddl@localhost:16379
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export API_PORT=18080
          export RUST_LOG=info
          export CORS_ORIGIN=*
          # 백그라운드에서 실행
          nohup ./target/release/mincenter-api > api.log 2>&1 &
          # PID 저장
          echo \$! > api.pid
          # 시작 대기 (더 오래)
          sleep 15
        "
        
        echo "Frontend services deployed successfully!"
        
    - name: Verify Frontend Deployment
      run: |
        echo "=== Verifying Frontend Deployment ==="
        
        # 잠시 대기
        sleep 30
        
        # Docker 서비스 상태 확인
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "cd ${{ env.DEPLOY_PATH }} && docker-compose -f docker-compose.deploy.yml ps"
        
        # 데이터베이스 연결 확인
        DB_STATUS=$(ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "docker exec mincenter-postgres pg_isready -U mincenter" | grep -o "accepting connections" || echo "failed")
        echo "Database Status: $DB_STATUS"
        
        # Redis 연결 확인
        REDIS_STATUS=$(ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "docker exec mincenter-redis redis-cli -a tnekwoddl ping" | grep -o "PONG" || echo "failed")
        echo "Redis Status: $REDIS_STATUS"
        
        # Rust API 상태 확인 (더 자세한 정보)
        echo "Checking Rust API process..."
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "ps aux | grep mincenter-api | grep -v grep" || true
        
        echo "Checking Rust API logs..."
        ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "cd ${{ env.DEPLOY_PATH }}/backends/api && tail -20 api.log" || true
        
        API_STATUS=$(ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "curl -s -o /dev/null -w '%{http_code}' http://localhost:18080/api/health || echo '000'")
        
        # 프론트엔드 서비스 상태 확인
        SITE_STATUS=$(ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "curl -s -o /dev/null -w '%{http_code}' http://localhost:13000 || echo '000'")
        ADMIN_STATUS=$(ssh -p ${{ env.DEPLOY_PORT }} ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "curl -s -o /dev/null -w '%{http_code}' http://localhost:13001 || echo '000'")
        
        echo "Rust API Status: $API_STATUS"
        echo "Site Frontend Status: $SITE_STATUS"
        echo "Admin Frontend Status: $ADMIN_STATUS"
        
        # 결과 요약
        echo "=== Deployment Summary ==="
        echo "PostgreSQL: $DB_STATUS"
        echo "Redis: $REDIS_STATUS"
        echo "Rust API: $API_STATUS"
        echo "Site Frontend: $SITE_STATUS"
        echo "Admin Frontend: $ADMIN_STATUS"
        
        if [ "$DB_STATUS" = "accepting connections" ] && [ "$REDIS_STATUS" = "PONG" ] && [ "$API_STATUS" = "200" ] && [ "$SITE_STATUS" = "200" ] && [ "$ADMIN_STATUS" = "200" ]; then
          echo "✅ All services deployment successful!"
        else
          echo "❌ Some services may have issues"
          exit 1
        fi 