name: Hybrid Deploy (Frontend + Binary API)

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_USER: ${{ secrets.REMOTE_USER }}
  REMOTE_PORT: ${{ secrets.REMOTE_PORT }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies (Site)
      working-directory: ./frontends/site
      run: npm ci
      
    - name: Install dependencies (Admin)
      working-directory: ./frontends/admin
      run: npm ci
      
    - name: Build Site Frontend
      working-directory: ./frontends/site
      run: npm run build
      
    - name: Build Admin Frontend
      working-directory: ./frontends/admin
      run: npm run build
      
    - name: Check for CentOS 7 binary
      id: check-binary
      run: |
        if [ -f "build/centos7/minshool-api" ]; then
          echo "binary_exists=true" >> $GITHUB_OUTPUT
          echo "Binary found: $(ls -la build/centos7/minshool-api)"
        else
          echo "binary_exists=false" >> $GITHUB_OUTPUT
          echo "No CentOS 7 binary found. Please run: ./scripts/build-centos7.sh"
        fi
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy API Binary (if exists)
      if: steps.check-binary.outputs.binary_exists == 'true'
      run: |
        echo "=== Deploying CentOS 7 API Binary ==="
        
        # 서버에 디렉토리 생성
        ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "mkdir -p /opt/minshool-api"
        
        # 바이너리 업로드
        scp -P ${{ env.REMOTE_PORT }} build/centos7/minshool-api ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/opt/minshool-api/
        
        # 실행 권한 설정
        ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "chmod +x /opt/minshool-api/minshool-api"
        
        # systemd 서비스 파일 생성
        ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "cat > /etc/systemd/system/minshool-api.service << 'EOF'
        [Unit]
        Description=MinShool API Server
        After=network.target postgresql.service redis.service
        
        [Service]
        Type=simple
        User=root
        WorkingDirectory=/opt/minshool-api
        ExecStart=/opt/minshool-api/minshool-api
        Restart=always
        RestartSec=3
        Environment=DATABASE_URL=postgresql://postgres:password@localhost:5432/mincenter
        Environment=REDIS_URL=redis://:default_password@localhost:6379
        Environment=JWT_SECRET=${{ secrets.JWT_SECRET }}
        Environment=API_PORT=18080
        Environment=RUST_LOG=info
        Environment=CORS_ORIGIN=*
        StandardOutput=journal
        StandardError=journal
        
        [Install]
        WantedBy=multi-user.target
        EOF"
        
        # systemd 재로드 및 서비스 시작
        ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "systemctl daemon-reload && systemctl enable minshool-api && systemctl restart minshool-api"
        
        echo "API Binary deployed successfully!"
        
    - name: Deploy Frontend
      run: |
        echo "=== Deploying Frontend ==="
        
        # 서버에 디렉토리 생성
        ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "mkdir -p /var/www/html/site /var/www/html/admin"
        
        # 사이트 파일 업로드
        rsync -avz -e "ssh -p ${{ env.REMOTE_PORT }}" --delete frontends/site/build/ ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/var/www/html/site/
        
        # 관리자 파일 업로드
        rsync -avz -e "ssh -p ${{ env.REMOTE_PORT }}" --delete frontends/admin/build/ ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/var/www/html/admin/
        
        # 권한 설정
        ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "chown -R nginx:nginx /var/www/html && chmod -R 755 /var/www/html"
        
        # Nginx 재시작
        ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "nginx -t && systemctl reload nginx"
        
        echo "Frontend deployed successfully!"
        
    - name: Deploy Database Files
      run: |
        echo "=== Deploying Database Files ==="
        
        # 서버에 디렉토리 생성
        ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "mkdir -p /opt/database"
        
        # 데이터베이스 파일 업로드
        scp -P ${{ env.REMOTE_PORT }} database/init.sql ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/opt/database/
        scp -P ${{ env.REMOTE_PORT }} database/seed.sql ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/opt/database/
        
        echo "Database files deployed successfully!"
        
    - name: Verify Deployment
      run: |
        echo "=== Verifying Deployment ==="
        
        # 잠시 대기
        sleep 10
        
        # API 서버 상태 확인 (바이너리가 있는 경우)
        if [ -f "build/centos7/minshool-api" ]; then
          API_STATUS=$(ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "curl -s -o /dev/null -w '%{http_code}' http://localhost:18080/health || echo '000'")
          echo "API Server Status: $API_STATUS"
        fi
        
        # 프론트엔드 상태 확인
        SITE_STATUS=$(ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "curl -s -o /dev/null -w '%{http_code}' http://localhost/site/ || echo '000'")
        ADMIN_STATUS=$(ssh -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "curl -s -o /dev/null -w '%{http_code}' http://localhost/admin/ || echo '000'")
        
        echo "Site Status: $SITE_STATUS"
        echo "Admin Status: $ADMIN_STATUS"
        
        # 결과 요약
        echo "=== Deployment Summary ==="
        echo "API Server: $([ -f "build/centos7/minshool-api" ] && echo "Deployed (Status: $API_STATUS)" || echo "Skipped - No binary")"
        echo "Site Frontend: $SITE_STATUS"
        echo "Admin Frontend: $ADMIN_STATUS"
        
        if [ "$SITE_STATUS" = "200" ] && [ "$ADMIN_STATUS" = "200" ]; then
          echo "✅ Frontend deployment successful!"
        else
          echo "❌ Frontend deployment may have issues"
          exit 1
        fi 