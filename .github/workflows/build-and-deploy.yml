name: Build and Deploy with Pre-built Images

on:
  # push:
  #   branches: [ main ]  # 비활성화: smart-deploy.yml과 충돌 방지
  workflow_dispatch:
    inputs:
      reason:
        description: 'Deployment reason'
        required: false
        default: 'Manual deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            frontends/site/package-lock.json
            frontends/admin/package-lock.json
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub (optional)
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true
      
      # Site Frontend 로컬 빌드 및 테스트
      - name: Install Site Dependencies
        working-directory: ./frontends/site
        run: npm ci
      
      - name: Test Site Build (Development)
        working-directory: ./frontends/site
        run: |
          echo "🧪 Testing with development environment..."
          npm run build
          echo "✅ Development build successful"
      
      - name: Test Site Build (Production)
        working-directory: ./frontends/site
        env:
          NODE_ENV: production
        run: |
          echo "🧪 Testing with production environment..."
          npm run build
          echo "✅ Production build successful"
      
      # Admin Frontend 로컬 빌드 및 테스트
      - name: Install Admin Dependencies
        working-directory: ./frontends/admin
        run: npm ci
      
      - name: Test Admin Build (Production)
        working-directory: ./frontends/admin
        env:
          NODE_ENV: production
        run: |
          echo "🧪 Testing admin production build..."
          npm run build
          echo "✅ Admin production build successful"
      
      # Docker 이미지 빌드 (로컬 빌드 검증 후)
      - name: Build Site Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontends/site
          file: ./frontends/site/Dockerfile
          push: false
          tags: mincenter-site:latest
          build-args: |
            VITE_API_URL=https://api.mincenter.kr
            PUBLIC_API_URL=https://api.mincenter.kr
            API_URL=https://api.mincenter.kr
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Admin Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontends/admin
          file: ./frontends/admin/Dockerfile
          push: false
          tags: mincenter-admin:latest
          build-args: |
            VITE_API_URL=https://api.mincenter.kr
            PUBLIC_API_URL=https://api.mincenter.kr
            API_URL=https://api.mincenter.kr
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # 이미지를 tar 파일로 저장
      - name: Save Docker Images
        run: |
          docker save mincenter-site:latest | gzip > site-image.tar.gz
          docker save mincenter-admin:latest | gzip > admin-image.tar.gz
          ls -la *.tar.gz
      
      # 서버 배포
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
      - name: Deploy to Server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || 22000 }}
        run: |
          echo "🚀 Deploying pre-built images to server..."
          
          # SSH known_hosts 추가
          mkdir -p ~/.ssh
          ssh-keyscan -H -p $DEPLOY_PORT $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          # 이미지 파일을 서버로 전송
          echo "📦 Uploading Docker images..."
          scp -P $DEPLOY_PORT site-image.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
          scp -P $DEPLOY_PORT admin-image.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
          
          # 서버에서 이미지 로드 및 배포
          ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
            cd $DEPLOY_PATH
            
            echo '🔄 Loading Docker images...'
            docker load < site-image.tar.gz
            docker load < admin-image.tar.gz
            
            echo '🛑 Stopping existing containers...'
            docker-compose -f docker-compose.prod.yml stop site admin || true
            
            echo '🚀 Starting new containers...'
            docker-compose -f docker-compose.prod.yml up -d site admin
            
            echo '🧹 Cleaning up image files...'
            rm -f site-image.tar.gz admin-image.tar.gz
            
            echo '✅ Deployment completed!'
          "
      
      # 배포 검증
      - name: Verify Deployment
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || 22000 }}
        run: |
          echo "🔍 Verifying deployment..."
          
          sleep 30  # 서비스 시작 대기
          
          ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
            # 컨테이너 상태 확인
            docker ps --filter 'name=mincenter' --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
            
            # 서비스 응답 확인
            SITE_STATUS=\$(curl -s -o /dev/null -w '%{http_code}' http://localhost:13000 || echo '000')
            ADMIN_STATUS=\$(curl -s -o /dev/null -w '%{http_code}' http://localhost:13001 || echo '000')
            
            echo 'Site Status: \$SITE_STATUS'
            echo 'Admin Status: \$ADMIN_STATUS'
            
            if [ \"\$SITE_STATUS\" = \"200\" ] && [ \"\$ADMIN_STATUS\" = \"200\" ]; then
              echo '✅ All services are running successfully!'
            else
              echo '❌ Some services may have issues'
              exit 1
            fi
          "