name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      target:
        description: '배포 대상'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - site
        - admin
        - api
        - env
      environment:
        description: '배포 환경'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        if: contains(github.event.inputs.target, 'site') || contains(github.event.inputs.target, 'admin') || github.event.inputs.target == 'all'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Rust
        if: contains(github.event.inputs.target, 'api') || github.event.inputs.target == 'all'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
      
      - name: Build and Deploy Site
        if: contains(github.event.inputs.target, 'site') || github.event.inputs.target == 'all'
        run: |
          cd frontends/site
          npm ci
          npm run build
      
      - name: Build and Deploy Admin
        if: contains(github.event.inputs.target, 'admin') || github.event.inputs.target == 'all'
        run: |
          cd frontends/admin
          npm ci
          npm run build
      
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            echo "=== 수동 배포 시작 ==="
            echo "대상: ${{ github.event.inputs.target }}"
            echo "환경: ${{ github.event.inputs.environment }}"
            
            # 사이트 배포
            if [[ "${{ github.event.inputs.target }}" == "site" || "${{ github.event.inputs.target }}" == "all" ]]; then
              echo "사이트 배포 중..."
              rsync -avz --delete --exclude='node_modules' --exclude='.svelte-kit' \
                ${{ github.workspace }}/frontends/site/ \
                ${{ secrets.DEPLOY_PATH }}/site/
              cd ${{ secrets.DEPLOY_PATH }}
              docker compose restart site
            fi
            
            # 관리자 배포
            if [[ "${{ github.event.inputs.target }}" == "admin" || "${{ github.event.inputs.target }}" == "all" ]]; then
              echo "관리자 배포 중..."
              rsync -avz --delete --exclude='node_modules' --exclude='.svelte-kit' \
                ${{ github.workspace }}/frontends/admin/ \
                ${{ secrets.DEPLOY_PATH }}/admin/
              cd ${{ secrets.DEPLOY_PATH }}
              docker compose restart admin
            fi
            
            # API 배포
            if [[ "${{ github.event.inputs.target }}" == "api" || "${{ github.event.inputs.target }}" == "all" ]]; then
              echo "API 배포 중..."
              rsync -avz --delete \
                ${{ github.workspace }}/backends/api/ \
                ${{ secrets.DEPLOY_PATH }}/api/
              cd ${{ secrets.DEPLOY_PATH }}/api
              cargo build --release
              cp target/release/mincenter-api mincenter-api
              chmod +x mincenter-api
              cd ${{ secrets.DEPLOY_PATH }}
              docker compose restart api
            fi
            
            # 환경 설정 배포
            if [[ "${{ github.event.inputs.target }}" == "env" || "${{ github.event.inputs.target }}" == "all" ]]; then
              echo "환경 설정 배포 중..."
              scp ${{ github.workspace }}/.env ${{ secrets.DEPLOY_PATH }}/
              cd ${{ secrets.DEPLOY_PATH }}
              docker compose restart
            fi
            
            echo "=== 배포 완료 ==="
            
            # 상태 확인
            docker compose ps
            
            # 헬스체크
            echo "API Health Check:"
            curl -f http://localhost:18080/health || echo "API 서비스 오류"
            
            echo "Site Health Check:"
            curl -f http://localhost:13000 || echo "Site 서비스 오류"
            
            echo "Admin Health Check:"
            curl -f http://localhost:13001 || echo "Admin 서비스 오류" 