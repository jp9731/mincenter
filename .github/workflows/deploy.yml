name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to server
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          echo "배포 경로: $DEPLOY_PATH"
          
          # 1. 프로젝트 디렉토리 확인 및 생성
          if [ ! -d "$DEPLOY_PATH" ]; then
            sudo mkdir -p "$DEPLOY_PATH"
            sudo chown -R ${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_USER }} "$DEPLOY_PATH"
          fi
          
          cd "$DEPLOY_PATH"
          
          # 2. Git 저장소 확인 및 최신 코드 가져오기
          if [ ! -d ".git" ]; then
            git clone https://github.com/jp9731/mincenter.git .
            sudo chown -R ${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_USER }} "$DEPLOY_PATH"
          fi
          
          git pull origin main
          
          echo "=== 배포 시작 ==="
          
          # 3. Docker 설치 확인 및 설치
          if ! command -v docker &> /dev/null; then
            echo "Docker 설치 중..."
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install -y docker-ce docker-ce-cli containerd.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ${{ secrets.DEPLOY_USER }}
            # 새 그룹 적용을 위해 로그아웃/로그인 필요하지만, 현재 세션에서는 sudo 사용
          fi
          
          # Docker Compose 설치 확인 및 설치
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose 설치 중..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # 4. Frontend 빌드 (Docker Node.js 20) - sudo 사용
          echo "4. Frontend 빌드 중..."
          
          # Site 빌드
          echo "Site 빌드 중..."
          sudo docker run --rm -v "$(pwd)/frontends/site:/app" -w /app node:20-alpine sh -c "
            npm ci
            npm run build
          "
          
          # Admin 빌드
          echo "Admin 빌드 중..."
          sudo docker run --rm -v "$(pwd)/frontends/admin:/app" -w /app node:20-alpine sh -c "
            npm ci
            npm run build
          "
          
          # 5. API 서버에서 직접 빌드 및 서비스 재시작
          echo "5. API 빌드 및 서비스 재시작 중..."
          bash scripts/server-build-api.sh
          
          # 6. Docker 서비스 재시작 (PostgreSQL, Redis, Nginx) - sudo 사용
          echo "6. Docker 서비스 재시작 중..."
          sudo docker-compose -f docker-compose.hybrid.yml down
          sudo docker-compose -f docker-compose.hybrid.yml up -d --build
          
          echo "=== 배포 완료 ==="
          
          # 7. 서비스 상태 확인
          echo "7. 서비스 상태 확인..."
          echo "API 서비스 상태:"
          sudo systemctl status minshool-api --no-pager
          
          echo "Docker 서비스 상태:"
          sudo docker-compose -f docker-compose.hybrid.yml ps
          
          echo "포트 사용 현황:"
          sudo netstat -tlnp | grep -E ':(80|443|13000|13001|15432|16379|18080)'
        EOF 