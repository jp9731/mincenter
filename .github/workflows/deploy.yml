name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Debug SSH Key
      run: |
        echo "DEPLOY_SSH_KEY 길이: ${#DEPLOY_SSH_KEY}"
        if [ -z "${{ secrets.DEPLOY_SSH_KEY }}" ]; then
          echo "❌ DEPLOY_SSH_KEY가 비어있습니다!"
          echo "GitHub Secrets에서 DEPLOY_SSH_KEY를 설정해주세요."
          exit 1
        else
          echo "✅ DEPLOY_SSH_KEY가 설정되어 있습니다."
        fi
        
        if [ -z "${{ secrets.DEPLOY_HOST }}" ]; then
          echo "❌ DEPLOY_HOST가 비어있습니다!"
          exit 1
        else
          echo "✅ DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}"
        fi
        
        if [ -z "${{ secrets.DEPLOY_USER }}" ]; then
          echo "❌ DEPLOY_USER가 비어있습니다!"
          exit 1
        else
          echo "✅ DEPLOY_USER: ${{ secrets.DEPLOY_USER }}"
        fi
        
        if [ -z "${{ secrets.DEPLOY_PATH }}" ]; then
          echo "❌ DEPLOY_PATH가 비어있습니다!"
          exit 1
        else
          echo "✅ DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}"
        fi
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        log-public-key: true
        
    - name: Configure SSH for CentOS 7
      run: |
        mkdir -p ~/.ssh
        cat >> ~/.ssh/config << EOF
        Host ${{ secrets.DEPLOY_HOST }}
          HostName ${{ secrets.DEPLOY_HOST }}
          User ${{ secrets.DEPLOY_USER }}
          Port 22000
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
          IdentityFile ~/.ssh/id_rsa
          IdentitiesOnly yes
          PreferredAuthentications publickey
          PubkeyAuthentication yes
          PasswordAuthentication no
          ServerAliveInterval 60
          ServerAliveCountMax 3
        EOF
        
        chmod 600 ~/.ssh/config
        
        # SSH 키 파일 생성
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H -p 22000 ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Test SSH Connection
      run: |
        echo "SSH 연결을 테스트합니다..."
        ssh -v -p 22000 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH 연결 성공!' && whoami && pwd"
        
    - name: Setup Server Environment
      run: |
        ssh -p 22000 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          # Git 설치 확인 및 설치
          if ! command -v git &> /dev/null; then
            echo "Git이 설치되지 않았습니다. 설치를 시작합니다..."
            sudo yum install -y git
          fi
          
          # Docker 권한 설정
          echo "Docker 권한을 설정합니다..."
          sudo usermod -aG docker ${{ secrets.DEPLOY_USER }}
          sudo systemctl restart docker
          
          # 프로젝트 디렉토리 확인 및 생성
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          echo "배포 경로: $DEPLOY_PATH"
          
          if [ ! -d "$DEPLOY_PATH" ]; then
            echo "배포 디렉토리가 없습니다. 생성합니다..."
            sudo mkdir -p "$DEPLOY_PATH"
            sudo chown -R ${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_USER }} "$DEPLOY_PATH"
          fi
          
          # Git 저장소 확인
          cd "$DEPLOY_PATH"
          echo "현재 디렉토리: $(pwd)"
          echo "디렉토리 내용:"
          ls -la
          
          if [ ! -d ".git" ]; then
            echo "Git 저장소가 없습니다. 클론합니다..."
            git clone https://github.com/jp9731/mincenter.git .
            sudo chown -R ${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_USER }} "$DEPLOY_PATH"
          fi
          
          echo "서버 환경 설정 완료"
        EOF
        
    - name: Deploy to server
      run: |
        ssh -p 22000 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          # Docker 그룹 변경사항 적용
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          echo "배포 경로: $DEPLOY_PATH"
          cd "$DEPLOY_PATH"
          echo "현재 디렉토리: $(pwd)"
          echo "디렉토리 내용:"
          ls -la
          echo "Git 상태 확인..."
          git status
          echo "최신 코드 가져오기..."
          git pull origin main
          echo "배포 스크립트 실행..."
          if [ -f "scripts/deploy.sh" ]; then
            echo "배포 스크립트를 찾았습니다."
            chmod +x scripts/deploy.sh
            ./scripts/deploy.sh
          else
            echo "배포 스크립트가 없습니다. 수동으로 배포를 진행합니다..."
            echo "사용 가능한 파일들:"
            ls -la *.yml *.yaml 2>/dev/null || echo "YAML 파일이 없습니다."
            # Docker Compose 배포
            if [ -f "docker-compose.prod.yml" ]; then
              echo "docker-compose.prod.yml 파일을 찾았습니다."
              docker-compose -f docker-compose.prod.yml down
              docker-compose -f docker-compose.prod.yml pull
              docker-compose -f docker-compose.prod.yml build --no-cache
              docker-compose -f docker-compose.prod.yml up -d
            elif [ -f "docker-compose.yml" ]; then
              echo "docker-compose.yml 파일을 찾았습니다."
              docker-compose down
              docker-compose pull
              docker-compose build --no-cache
              docker-compose up -d
            else
              echo "docker-compose 파일이 없습니다!"
              echo "현재 디렉토리의 모든 파일:"
              find . -type f -name "*.yml" -o -name "*.yaml" -o -name "*.sh" | head -20
              exit 1
            fi
          fi
        EOF
        
    - name: Health check
      run: |
        sleep 60
        echo "헬스체크 시작..."
        curl -f http://${{ secrets.DEPLOY_HOST }}:13000/health || echo "사이트 헬스체크 실패"
        curl -f http://${{ secrets.DEPLOY_HOST }}:13001/health || echo "관리자 페이지 헬스체크 실패"
        curl -f http://${{ secrets.DEPLOY_HOST }}:18080/health || echo "API 헬스체크 실패" 