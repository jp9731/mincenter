name: Restore .env File

on:
  workflow_dispatch:
    inputs:
      action:
        description: '복구 작업 선택'
        required: true
        default: 'check'
        type: choice
        options:
        - check
        - backup
        - restore
        - sync

jobs:
  restore-env:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check .env status
        if: inputs.action == 'check'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            echo "=== .env 파일 상태 확인 ==="
            
            if [ -f "${{ secrets.DEPLOY_PATH }}/.env" ]; then
              echo "✅ .env 파일이 존재합니다."
              echo "파일 크기: $(stat -c%s ${{ secrets.DEPLOY_PATH }}/.env) bytes"
              echo "수정 시간: $(stat -c%y ${{ secrets.DEPLOY_PATH }}/.env)"
              echo ""
              echo "주요 설정:"
              grep -E '^(APP_NAME|DOMAIN|POSTGRES_DB|API_PORT|JWT_SECRET)=' ${{ secrets.DEPLOY_PATH }}/.env
            else
              echo "❌ .env 파일이 존재하지 않습니다!"
            fi
            
            echo ""
            echo "백업 파일 목록:"
            ls -la ${{ secrets.DEPLOY_PATH }}/backups/.env_backup_*.gz 2>/dev/null || echo "백업 파일이 없습니다."
      
      - name: Backup .env
        if: inputs.action == 'backup'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            echo "=== .env 파일 백업 ==="
            
            mkdir -p ${{ secrets.DEPLOY_PATH }}/backups
            
            if [ -f "${{ secrets.DEPLOY_PATH }}/.env" ]; then
              TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
              BACKUP_FILE="${{ secrets.DEPLOY_PATH }}/backups/.env_backup_${TIMESTAMP}"
              
              cp ${{ secrets.DEPLOY_PATH }}/.env $BACKUP_FILE
              gzip $BACKUP_FILE
              
              echo "✅ 백업 완료: ${BACKUP_FILE}.gz"
              
              # 오래된 백업 정리 (30일 이상)
              find ${{ secrets.DEPLOY_PATH }}/backups -name '.env_backup_*.gz' -mtime +30 -delete
            else
              echo "❌ 백업할 .env 파일이 없습니다."
            fi
      
      - name: Restore .env
        if: inputs.action == 'restore'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            echo "=== .env 파일 복구 ==="
            
            # 최신 백업 파일 찾기
            LATEST_BACKUP=$(ls -t ${{ secrets.DEPLOY_PATH }}/backups/.env_backup_*.gz 2>/dev/null | head -1)
            
            if [ -z "$LATEST_BACKUP" ]; then
              echo "❌ 백업 파일을 찾을 수 없습니다."
              exit 1
            fi
            
            echo "복구할 백업 파일: $LATEST_BACKUP"
            
            # 백업 파일 압축 해제 및 복구
            gunzip -c $LATEST_BACKUP > ${{ secrets.DEPLOY_PATH }}/.env
            chmod 644 ${{ secrets.DEPLOY_PATH }}/.env
            
            echo "✅ 복구 완료!"
            
            # 복구된 파일 확인
            echo "복구된 .env 파일 내용:"
            head -10 ${{ secrets.DEPLOY_PATH }}/.env
      
      - name: Sync .env
        if: inputs.action == 'sync'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            echo "=== .env 파일 동기화 ==="
            
            # 기존 .env 백업
            mkdir -p ${{ secrets.DEPLOY_PATH }}/backups
            
            if [ -f "${{ secrets.DEPLOY_PATH }}/.env" ]; then
              TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
              cp ${{ secrets.DEPLOY_PATH }}/.env ${{ secrets.DEPLOY_PATH }}/backups/.env_backup_${TIMESTAMP}
              gzip ${{ secrets.DEPLOY_PATH }}/backups/.env_backup_${TIMESTAMP}
              echo "기존 .env 백업 완료"
            fi
            
            # 로컬 .env 파일을 서버에 전송
            scp ${{ github.workspace }}/.env ${{ secrets.DEPLOY_PATH }}/
            chmod 644 ${{ secrets.DEPLOY_PATH }}/.env
            
            echo "✅ 동기화 완료!"
            
            # 동기화된 파일 확인
            echo "동기화된 .env 파일 내용:"
            head -10 ${{ secrets.DEPLOY_PATH }}/.env 