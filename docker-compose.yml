version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: ${APP_NAME:-mincenter}_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mincenter}
      POSTGRES_USER: ${POSTGRES_USER:-mincenter}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/korean-setup.sql:/docker-entrypoint-initdb.d/01-korean-setup.sql:ro
      - ./database/init.sql:/docker-entrypoint-initdb.d/02-init.sql:ro
      - ./database/seed.sql:/docker-entrypoint-initdb.d/03-seed.sql:ro
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${POSTGRES_PORT:-15432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mincenter} -d ${POSTGRES_DB:-mincenter}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ${APP_NAME:-mincenter}_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rust API
  api:
    build:
      context: ./backends/api
      dockerfile: Dockerfile
    container_name: ${APP_NAME:-mincenter}_api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-mincenter}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-mincenter}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      REFRESH_SECRET: ${REFRESH_SECRET}
      API_PORT: ${API_PORT:-18080}
      RUST_LOG: ${RUST_LOG_LEVEL:-info}
      CORS_ORIGIN: ${CORS_ORIGIN}
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${API_PORT:-18080}:${API_PORT:-18080}"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT:-18080}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SvelteKit Site
  site:
    build:
      context: ./frontends/site
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL}
        - PUBLIC_API_URL=${PUBLIC_API_URL}
    container_name: ${APP_NAME:-mincenter}_site
    depends_on:
      api:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${SITE_PORT:-13000}
      API_URL: http://api:${API_PORT:-18080}
      PUBLIC_API_URL: ${PUBLIC_API_URL}
      SESSION_SECRET: ${SESSION_SECRET}
    ports:
      - "${SITE_PORT:-13000}:${SITE_PORT:-13000}"
    restart: unless-stopped

  # SvelteKit Admin
  admin:
    build:
      context: ./frontends/admin
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL}
        - PUBLIC_API_URL=${PUBLIC_API_URL}
    container_name: ${APP_NAME:-mincenter}_admin
    depends_on:
      api:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${ADMIN_PORT:-13001}
      API_URL: http://api:${API_PORT:-18080}
      PUBLIC_API_URL: ${PUBLIC_API_URL}
      SESSION_SECRET: ${ADMIN_SESSION_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
    ports:
      - "${ADMIN_PORT:-13001}:${ADMIN_PORT:-13001}"
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: ${APP_NAME:-mincenter}_network
    driver: bridge
